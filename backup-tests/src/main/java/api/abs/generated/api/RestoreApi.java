/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.api;

import api.abs.generated.ApiCallback;
import api.abs.generated.ApiClient;
import api.abs.generated.ApiException;
import api.abs.generated.ApiResponse;
import api.abs.generated.Configuration;
import api.abs.generated.Pair;
import api.abs.generated.ProgressRequestBody;
import api.abs.generated.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import api.abs.generated.model.DtoRestoreJobStatus;
import api.abs.generated.model.DtoRestoreRequest;
import api.abs.generated.model.DtoRestoreTimestampRequest;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RestoreApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RestoreApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RestoreApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelRestore
     * @param jobId Restore job ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore job canceled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid job ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRestoreCall(@javax.annotation.Nonnull Long jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/restore/cancel/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRestoreValidateBeforeCall(@javax.annotation.Nonnull Long jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling cancelRestore(Async)");
        }

        return cancelRestoreCall(jobId, _callback);

    }

    /**
     * Cancel a running restore operation.
     * 
     * @param jobId Restore job ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore job canceled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid job ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String cancelRestore(@javax.annotation.Nonnull Long jobId) throws ApiException {
        ApiResponse<String> localVarResp = cancelRestoreWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Cancel a running restore operation.
     * 
     * @param jobId Restore job ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore job canceled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid job ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> cancelRestoreWithHttpInfo(@javax.annotation.Nonnull Long jobId) throws ApiException {
        okhttp3.Call localVarCall = cancelRestoreValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a running restore operation. (asynchronously)
     * 
     * @param jobId Restore job ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore job canceled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid job ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelRestoreAsync(@javax.annotation.Nonnull Long jobId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRestoreValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreFull
     * @param dtoRestoreRequest Restore request details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreFullCall(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dtoRestoreRequest;

        // create path and map variables
        String localVarPath = "/v1/restore/full";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreFullValidateBeforeCall(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dtoRestoreRequest' is set
        if (dtoRestoreRequest == null) {
            throw new ApiException("Missing the required parameter 'dtoRestoreRequest' when calling restoreFull(Async)");
        }

        return restoreFullCall(dtoRestoreRequest, _callback);

    }

    /**
     * Trigger an asynchronous full restore operation.
     * 
     * @param dtoRestoreRequest Restore request details (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public Long restoreFull(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest) throws ApiException {
        ApiResponse<Long> localVarResp = restoreFullWithHttpInfo(dtoRestoreRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger an asynchronous full restore operation.
     * 
     * @param dtoRestoreRequest Restore request details (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> restoreFullWithHttpInfo(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest) throws ApiException {
        okhttp3.Call localVarCall = restoreFullValidateBeforeCall(dtoRestoreRequest, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger an asynchronous full restore operation. (asynchronously)
     * 
     * @param dtoRestoreRequest Restore request details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreFullAsync(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreFullValidateBeforeCall(dtoRestoreRequest, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreIncremental
     * @param dtoRestoreRequest Restore request details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreIncrementalCall(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dtoRestoreRequest;

        // create path and map variables
        String localVarPath = "/v1/restore/incremental";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreIncrementalValidateBeforeCall(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dtoRestoreRequest' is set
        if (dtoRestoreRequest == null) {
            throw new ApiException("Missing the required parameter 'dtoRestoreRequest' when calling restoreIncremental(Async)");
        }

        return restoreIncrementalCall(dtoRestoreRequest, _callback);

    }

    /**
     * Trigger an asynchronous incremental restore operation.
     * 
     * @param dtoRestoreRequest Restore request details (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public Long restoreIncremental(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest) throws ApiException {
        ApiResponse<Long> localVarResp = restoreIncrementalWithHttpInfo(dtoRestoreRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger an asynchronous incremental restore operation.
     * 
     * @param dtoRestoreRequest Restore request details (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> restoreIncrementalWithHttpInfo(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest) throws ApiException {
        okhttp3.Call localVarCall = restoreIncrementalValidateBeforeCall(dtoRestoreRequest, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger an asynchronous incremental restore operation. (asynchronously)
     * 
     * @param dtoRestoreRequest Restore request details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreIncrementalAsync(@javax.annotation.Nonnull DtoRestoreRequest dtoRestoreRequest, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreIncrementalValidateBeforeCall(dtoRestoreRequest, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreStatus
     * @param jobId Job ID to retrieve the status (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore job status details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreStatusCall(@javax.annotation.Nonnull Long jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/restore/status/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreStatusValidateBeforeCall(@javax.annotation.Nonnull Long jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling restoreStatus(Async)");
        }

        return restoreStatusCall(jobId, _callback);

    }

    /**
     * Retrieve status for a restore job.
     * 
     * @param jobId Job ID to retrieve the status (required)
     * @return DtoRestoreJobStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore job status details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public DtoRestoreJobStatus restoreStatus(@javax.annotation.Nonnull Long jobId) throws ApiException {
        ApiResponse<DtoRestoreJobStatus> localVarResp = restoreStatusWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Retrieve status for a restore job.
     * 
     * @param jobId Job ID to retrieve the status (required)
     * @return ApiResponse&lt;DtoRestoreJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore job status details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DtoRestoreJobStatus> restoreStatusWithHttpInfo(@javax.annotation.Nonnull Long jobId) throws ApiException {
        okhttp3.Call localVarCall = restoreStatusValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<DtoRestoreJobStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve status for a restore job. (asynchronously)
     * 
     * @param jobId Job ID to retrieve the status (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore job status details </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreStatusAsync(@javax.annotation.Nonnull Long jobId, final ApiCallback<DtoRestoreJobStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreStatusValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<DtoRestoreJobStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreTimestamp
     * @param dtoRestoreTimestampRequest Restore request details (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreTimestampCall(@javax.annotation.Nonnull DtoRestoreTimestampRequest dtoRestoreTimestampRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dtoRestoreTimestampRequest;

        // create path and map variables
        String localVarPath = "/v1/restore/timestamp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreTimestampValidateBeforeCall(@javax.annotation.Nonnull DtoRestoreTimestampRequest dtoRestoreTimestampRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dtoRestoreTimestampRequest' is set
        if (dtoRestoreTimestampRequest == null) {
            throw new ApiException("Missing the required parameter 'dtoRestoreTimestampRequest' when calling restoreTimestamp(Async)");
        }

        return restoreTimestampCall(dtoRestoreTimestampRequest, _callback);

    }

    /**
     * Trigger an asynchronous restore operation to specific point in time.
     * Restores backup from the given point in time.
     * @param dtoRestoreTimestampRequest Restore request details (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public Long restoreTimestamp(@javax.annotation.Nonnull DtoRestoreTimestampRequest dtoRestoreTimestampRequest) throws ApiException {
        ApiResponse<Long> localVarResp = restoreTimestampWithHttpInfo(dtoRestoreTimestampRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger an asynchronous restore operation to specific point in time.
     * Restores backup from the given point in time.
     * @param dtoRestoreTimestampRequest Restore request details (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> restoreTimestampWithHttpInfo(@javax.annotation.Nonnull DtoRestoreTimestampRequest dtoRestoreTimestampRequest) throws ApiException {
        okhttp3.Call localVarCall = restoreTimestampValidateBeforeCall(dtoRestoreTimestampRequest, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger an asynchronous restore operation to specific point in time. (asynchronously)
     * Restores backup from the given point in time.
     * @param dtoRestoreTimestampRequest Restore request details (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Restore operation job id </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreTimestampAsync(@javax.annotation.Nonnull DtoRestoreTimestampRequest dtoRestoreTimestampRequest, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreTimestampValidateBeforeCall(dtoRestoreTimestampRequest, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveConfiguration
     * @param name Backup routine name (required)
     * @param timestamp Backup timestamp (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveConfigurationCall(@javax.annotation.Nonnull String name, @javax.annotation.Nonnull Long timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/retrieve/configuration/{name}/{timestamp}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "timestamp" + "}", localVarApiClient.escapeString(timestamp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveConfigurationValidateBeforeCall(@javax.annotation.Nonnull String name, @javax.annotation.Nonnull Long timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling retrieveConfiguration(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling retrieveConfiguration(Async)");
        }

        return retrieveConfigurationCall(name, timestamp, _callback);

    }

    /**
     * Retrieve Aerospike cluster configuration backup
     * 
     * @param name Backup routine name (required)
     * @param timestamp Backup timestamp (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public File retrieveConfiguration(@javax.annotation.Nonnull String name, @javax.annotation.Nonnull Long timestamp) throws ApiException {
        ApiResponse<File> localVarResp = retrieveConfigurationWithHttpInfo(name, timestamp);
        return localVarResp.getData();
    }

    /**
     * Retrieve Aerospike cluster configuration backup
     * 
     * @param name Backup routine name (required)
     * @param timestamp Backup timestamp (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> retrieveConfigurationWithHttpInfo(@javax.annotation.Nonnull String name, @javax.annotation.Nonnull Long timestamp) throws ApiException {
        okhttp3.Call localVarCall = retrieveConfigurationValidateBeforeCall(name, timestamp, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Aerospike cluster configuration backup (asynchronously)
     * 
     * @param name Backup routine name (required)
     * @param timestamp Backup timestamp (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveConfigurationAsync(@javax.annotation.Nonnull String name, @javax.annotation.Nonnull Long timestamp, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveConfigurationValidateBeforeCall(name, timestamp, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for retrieveRestoreJobs
     * @param from Lower bound timestamp filter (optional)
     * @param to Upper bound timestamp filter (optional)
     * @param status Comma-separated status filter (Running,Done,Failed,Cancelled). Use ! prefix for exclude filter (e.g., !Failed,Cancelled) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore jobs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveRestoreJobsCall(@javax.annotation.Nullable Long from, @javax.annotation.Nullable Long to, @javax.annotation.Nullable String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/restore/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrieveRestoreJobsValidateBeforeCall(@javax.annotation.Nullable Long from, @javax.annotation.Nullable Long to, @javax.annotation.Nullable String status, final ApiCallback _callback) throws ApiException {
        return retrieveRestoreJobsCall(from, to, status, _callback);

    }

    /**
     * Retrieve restore jobs.
     * 
     * @param from Lower bound timestamp filter (optional)
     * @param to Upper bound timestamp filter (optional)
     * @param status Comma-separated status filter (Running,Done,Failed,Cancelled). Use ! prefix for exclude filter (e.g., !Failed,Cancelled) (optional)
     * @return Map&lt;String, DtoRestoreJobStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore jobs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, DtoRestoreJobStatus> retrieveRestoreJobs(@javax.annotation.Nullable Long from, @javax.annotation.Nullable Long to, @javax.annotation.Nullable String status) throws ApiException {
        ApiResponse<Map<String, DtoRestoreJobStatus>> localVarResp = retrieveRestoreJobsWithHttpInfo(from, to, status);
        return localVarResp.getData();
    }

    /**
     * Retrieve restore jobs.
     * 
     * @param from Lower bound timestamp filter (optional)
     * @param to Upper bound timestamp filter (optional)
     * @param status Comma-separated status filter (Running,Done,Failed,Cancelled). Use ! prefix for exclude filter (e.g., !Failed,Cancelled) (optional)
     * @return ApiResponse&lt;Map&lt;String, DtoRestoreJobStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore jobs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, DtoRestoreJobStatus>> retrieveRestoreJobsWithHttpInfo(@javax.annotation.Nullable Long from, @javax.annotation.Nullable Long to, @javax.annotation.Nullable String status) throws ApiException {
        okhttp3.Call localVarCall = retrieveRestoreJobsValidateBeforeCall(from, to, status, null);
        Type localVarReturnType = new TypeToken<Map<String, DtoRestoreJobStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve restore jobs. (asynchronously)
     * 
     * @param from Lower bound timestamp filter (optional)
     * @param to Upper bound timestamp filter (optional)
     * @param status Comma-separated status filter (Running,Done,Failed,Cancelled). Use ! prefix for exclude filter (e.g., !Failed,Cancelled) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Restore jobs </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call retrieveRestoreJobsAsync(@javax.annotation.Nullable Long from, @javax.annotation.Nullable Long to, @javax.annotation.Nullable String status, final ApiCallback<Map<String, DtoRestoreJobStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrieveRestoreJobsValidateBeforeCall(from, to, status, _callback);
        Type localVarReturnType = new TypeToken<Map<String, DtoRestoreJobStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
