/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoHTTPServerConfig;
import api.abs.generated.model.DtoLoggerConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * BackupServiceConfig represents the backup service configuration properties.
 */
public class DtoBackupServiceConfig {
  public static final String SERIALIZED_NAME_HTTP = "http";
  @SerializedName(SERIALIZED_NAME_HTTP)
  @javax.annotation.Nullable
  private DtoHTTPServerConfig http;

  public static final String SERIALIZED_NAME_LOGGER = "logger";
  @SerializedName(SERIALIZED_NAME_LOGGER)
  @javax.annotation.Nullable
  private DtoLoggerConfig logger;

  public DtoBackupServiceConfig() {
  }

  public DtoBackupServiceConfig http(@javax.annotation.Nullable DtoHTTPServerConfig http) {
    this.http = http;
    return this;
  }

  /**
   * HTTPServer is the backup service HTTP server configuration.
   * @return http
   */
  @javax.annotation.Nullable
  public DtoHTTPServerConfig getHttp() {
    return http;
  }

  public void setHttp(@javax.annotation.Nullable DtoHTTPServerConfig http) {
    this.http = http;
  }


  public DtoBackupServiceConfig logger(@javax.annotation.Nullable DtoLoggerConfig logger) {
    this.logger = logger;
    return this;
  }

  /**
   * Logger is the backup service logger configuration.
   * @return logger
   */
  @javax.annotation.Nullable
  public DtoLoggerConfig getLogger() {
    return logger;
  }

  public void setLogger(@javax.annotation.Nullable DtoLoggerConfig logger) {
    this.logger = logger;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoBackupServiceConfig dtoBackupServiceConfig = (DtoBackupServiceConfig) o;
    return Objects.equals(this.http, dtoBackupServiceConfig.http) &&
        Objects.equals(this.logger, dtoBackupServiceConfig.logger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(http, logger);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoBackupServiceConfig {\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    logger: ").append(toIndentedString(logger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("http", "logger"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoBackupServiceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoBackupServiceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoBackupServiceConfig is not found in the empty JSON string", DtoBackupServiceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoBackupServiceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoBackupServiceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `http`
      if (jsonObj.get("http") != null && !jsonObj.get("http").isJsonNull()) {
        DtoHTTPServerConfig.validateJsonElement(jsonObj.get("http"));
      }
      // validate the optional field `logger`
      if (jsonObj.get("logger") != null && !jsonObj.get("logger").isJsonNull()) {
        DtoLoggerConfig.validateJsonElement(jsonObj.get("logger"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoBackupServiceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoBackupServiceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoBackupServiceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoBackupServiceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoBackupServiceConfig>() {
           @Override
           public void write(JsonWriter out, DtoBackupServiceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoBackupServiceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoBackupServiceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoBackupServiceConfig
   * @throws IOException if the JSON string is invalid with respect to DtoBackupServiceConfig
   */
  public static DtoBackupServiceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoBackupServiceConfig.class);
  }

  /**
   * Convert an instance of DtoBackupServiceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

