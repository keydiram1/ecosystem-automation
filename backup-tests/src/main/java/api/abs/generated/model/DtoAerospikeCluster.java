/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoCredentials;
import api.abs.generated.model.DtoSeedNode;
import api.abs.generated.model.DtoTLS;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * AerospikeCluster represents the configuration for an Aerospike cluster for backup.
 */
public class DtoAerospikeCluster {
  public static final String SERIALIZED_NAME_CONN_TIMEOUT = "conn-timeout";
  @SerializedName(SERIALIZED_NAME_CONN_TIMEOUT)
  @javax.annotation.Nullable
  private Integer connTimeout = 30000;

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  @javax.annotation.Nullable
  private DtoCredentials credentials;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_MAX_PARALLEL_SCANS = "max-parallel-scans";
  @SerializedName(SERIALIZED_NAME_MAX_PARALLEL_SCANS)
  @javax.annotation.Nullable
  private Integer maxParallelScans;

  public static final String SERIALIZED_NAME_SEED_NODES = "seed-nodes";
  @SerializedName(SERIALIZED_NAME_SEED_NODES)
  @javax.annotation.Nonnull
  private List<DtoSeedNode> seedNodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  @javax.annotation.Nullable
  private DtoTLS tls;

  public static final String SERIALIZED_NAME_USE_SERVICES_ALTERNATE = "use-services-alternate";
  @SerializedName(SERIALIZED_NAME_USE_SERVICES_ALTERNATE)
  @javax.annotation.Nullable
  private Boolean useServicesAlternate = false;

  public DtoAerospikeCluster() {
  }

  public DtoAerospikeCluster connTimeout(@javax.annotation.Nullable Integer connTimeout) {
    this.connTimeout = connTimeout;
    return this;
  }

  /**
   * The connection timeout in milliseconds.
   * @return connTimeout
   */
  @javax.annotation.Nullable
  public Integer getConnTimeout() {
    return connTimeout;
  }

  public void setConnTimeout(@javax.annotation.Nullable Integer connTimeout) {
    this.connTimeout = connTimeout;
  }


  public DtoAerospikeCluster credentials(@javax.annotation.Nullable DtoCredentials credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * The authentication details to the Aerospike cluster.
   * @return credentials
   */
  @javax.annotation.Nullable
  public DtoCredentials getCredentials() {
    return credentials;
  }

  public void setCredentials(@javax.annotation.Nullable DtoCredentials credentials) {
    this.credentials = credentials;
  }


  public DtoAerospikeCluster label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * The cluster name. Optional: used only in logs and error messages.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public DtoAerospikeCluster maxParallelScans(@javax.annotation.Nullable Integer maxParallelScans) {
    this.maxParallelScans = maxParallelScans;
    return this;
  }

  /**
   * Specifies the maximum number of parallel scans allowed across the cluster. This property helps reduce the load on the cluster and is shared among all backups using the cluster. Default: unlimited.
   * @return maxParallelScans
   */
  @javax.annotation.Nullable
  public Integer getMaxParallelScans() {
    return maxParallelScans;
  }

  public void setMaxParallelScans(@javax.annotation.Nullable Integer maxParallelScans) {
    this.maxParallelScans = maxParallelScans;
  }


  public DtoAerospikeCluster seedNodes(@javax.annotation.Nonnull List<DtoSeedNode> seedNodes) {
    this.seedNodes = seedNodes;
    return this;
  }

  public DtoAerospikeCluster addSeedNodesItem(DtoSeedNode seedNodesItem) {
    if (this.seedNodes == null) {
      this.seedNodes = new ArrayList<>();
    }
    this.seedNodes.add(seedNodesItem);
    return this;
  }

  /**
   * The seed nodes details.
   * @return seedNodes
   */
  @javax.annotation.Nonnull
  public List<DtoSeedNode> getSeedNodes() {
    return seedNodes;
  }

  public void setSeedNodes(@javax.annotation.Nonnull List<DtoSeedNode> seedNodes) {
    this.seedNodes = seedNodes;
  }


  public DtoAerospikeCluster tls(@javax.annotation.Nullable DtoTLS tls) {
    this.tls = tls;
    return this;
  }

  /**
   * The cluster TLS configuration.
   * @return tls
   */
  @javax.annotation.Nullable
  public DtoTLS getTls() {
    return tls;
  }

  public void setTls(@javax.annotation.Nullable DtoTLS tls) {
    this.tls = tls;
  }


  public DtoAerospikeCluster useServicesAlternate(@javax.annotation.Nullable Boolean useServicesAlternate) {
    this.useServicesAlternate = useServicesAlternate;
    return this;
  }

  /**
   * Whether should use \&quot;services-alternate\&quot; instead of \&quot;services\&quot; in info request during cluster tending.
   * @return useServicesAlternate
   */
  @javax.annotation.Nullable
  public Boolean getUseServicesAlternate() {
    return useServicesAlternate;
  }

  public void setUseServicesAlternate(@javax.annotation.Nullable Boolean useServicesAlternate) {
    this.useServicesAlternate = useServicesAlternate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoAerospikeCluster dtoAerospikeCluster = (DtoAerospikeCluster) o;
    return Objects.equals(this.connTimeout, dtoAerospikeCluster.connTimeout) &&
        Objects.equals(this.credentials, dtoAerospikeCluster.credentials) &&
        Objects.equals(this.label, dtoAerospikeCluster.label) &&
        Objects.equals(this.maxParallelScans, dtoAerospikeCluster.maxParallelScans) &&
        Objects.equals(this.seedNodes, dtoAerospikeCluster.seedNodes) &&
        Objects.equals(this.tls, dtoAerospikeCluster.tls) &&
        Objects.equals(this.useServicesAlternate, dtoAerospikeCluster.useServicesAlternate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(connTimeout, credentials, label, maxParallelScans, seedNodes, tls, useServicesAlternate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoAerospikeCluster {\n");
    sb.append("    connTimeout: ").append(toIndentedString(connTimeout)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    maxParallelScans: ").append(toIndentedString(maxParallelScans)).append("\n");
    sb.append("    seedNodes: ").append(toIndentedString(seedNodes)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    useServicesAlternate: ").append(toIndentedString(useServicesAlternate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("conn-timeout", "credentials", "label", "max-parallel-scans", "seed-nodes", "tls", "use-services-alternate"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("seed-nodes"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoAerospikeCluster
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoAerospikeCluster.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoAerospikeCluster is not found in the empty JSON string", DtoAerospikeCluster.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoAerospikeCluster.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoAerospikeCluster` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtoAerospikeCluster.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `credentials`
      if (jsonObj.get("credentials") != null && !jsonObj.get("credentials").isJsonNull()) {
        DtoCredentials.validateJsonElement(jsonObj.get("credentials"));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("seed-nodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `seed-nodes` to be an array in the JSON string but got `%s`", jsonObj.get("seed-nodes").toString()));
      }

      JsonArray jsonArrayseedNodes = jsonObj.getAsJsonArray("seed-nodes");
      // validate the required field `seed-nodes` (array)
      for (int i = 0; i < jsonArrayseedNodes.size(); i++) {
        DtoSeedNode.validateJsonElement(jsonArrayseedNodes.get(i));
      };
      // validate the optional field `tls`
      if (jsonObj.get("tls") != null && !jsonObj.get("tls").isJsonNull()) {
        DtoTLS.validateJsonElement(jsonObj.get("tls"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoAerospikeCluster.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoAerospikeCluster' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoAerospikeCluster> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoAerospikeCluster.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoAerospikeCluster>() {
           @Override
           public void write(JsonWriter out, DtoAerospikeCluster value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoAerospikeCluster read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoAerospikeCluster given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoAerospikeCluster
   * @throws IOException if the JSON string is invalid with respect to DtoAerospikeCluster
   */
  public static DtoAerospikeCluster fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoAerospikeCluster.class);
  }

  /**
   * Convert an instance of DtoAerospikeCluster to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

