/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * RetentionPolicy specifies how many full and incremental backups to keep.
 */
public class DtoRetentionPolicy {
  public static final String SERIALIZED_NAME_FULL = "full";
  @SerializedName(SERIALIZED_NAME_FULL)
  @javax.annotation.Nullable
  private Integer full;

  public static final String SERIALIZED_NAME_INCREMENTAL = "incremental";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL)
  @javax.annotation.Nullable
  private Integer incremental;

  public DtoRetentionPolicy() {
  }

  public DtoRetentionPolicy full(@javax.annotation.Nullable Integer full) {
    this.full = full;
    return this;
  }

  /**
   * Number of full backups to store: - If nil, retain all full backups. - If N is specified, retain the last N full backups. - The minimum value is 1.
   * minimum: 1
   * @return full
   */
  @javax.annotation.Nullable
  public Integer getFull() {
    return full;
  }

  public void setFull(@javax.annotation.Nullable Integer full) {
    this.full = full;
  }


  public DtoRetentionPolicy incremental(@javax.annotation.Nullable Integer incremental) {
    this.incremental = incremental;
    return this;
  }

  /**
   * Number of full backups to store incremental backups for: - If nil, retain all incremental backups. - If N is specified, retain incremental backups for the last N full backups. - If set to 0, do not retain any incremental backups. - Must not exceed the value of FullBackups.
   * @return incremental
   */
  @javax.annotation.Nullable
  public Integer getIncremental() {
    return incremental;
  }

  public void setIncremental(@javax.annotation.Nullable Integer incremental) {
    this.incremental = incremental;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoRetentionPolicy dtoRetentionPolicy = (DtoRetentionPolicy) o;
    return Objects.equals(this.full, dtoRetentionPolicy.full) &&
        Objects.equals(this.incremental, dtoRetentionPolicy.incremental);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(full, incremental);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoRetentionPolicy {\n");
    sb.append("    full: ").append(toIndentedString(full)).append("\n");
    sb.append("    incremental: ").append(toIndentedString(incremental)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("full", "incremental"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoRetentionPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoRetentionPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoRetentionPolicy is not found in the empty JSON string", DtoRetentionPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoRetentionPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoRetentionPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoRetentionPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoRetentionPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoRetentionPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoRetentionPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoRetentionPolicy>() {
           @Override
           public void write(JsonWriter out, DtoRetentionPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoRetentionPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoRetentionPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoRetentionPolicy
   * @throws IOException if the JSON string is invalid with respect to DtoRetentionPolicy
   */
  public static DtoRetentionPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoRetentionPolicy.class);
  }

  /**
   * Convert an instance of DtoRetentionPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

