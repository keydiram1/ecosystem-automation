/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoRunningJob;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * RoutineState represent the current state of backups (full and incremental).
 */
public class DtoRoutineState {
  public static final String SERIALIZED_NAME_FULL = "full";
  @SerializedName(SERIALIZED_NAME_FULL)
  @javax.annotation.Nullable
  private DtoRunningJob full;

  public static final String SERIALIZED_NAME_INCREMENTAL = "incremental";
  @SerializedName(SERIALIZED_NAME_INCREMENTAL)
  @javax.annotation.Nullable
  private DtoRunningJob incremental;

  public static final String SERIALIZED_NAME_LAST_FULL = "last-full";
  @SerializedName(SERIALIZED_NAME_LAST_FULL)
  @javax.annotation.Nullable
  private String lastFull;

  public static final String SERIALIZED_NAME_LAST_INCREMENTAL = "last-incremental";
  @SerializedName(SERIALIZED_NAME_LAST_INCREMENTAL)
  @javax.annotation.Nullable
  private String lastIncremental;

  public static final String SERIALIZED_NAME_NEXT_FULL = "next-full";
  @SerializedName(SERIALIZED_NAME_NEXT_FULL)
  @javax.annotation.Nullable
  private String nextFull;

  public static final String SERIALIZED_NAME_NEXT_INCREMENTAL = "next-incremental";
  @SerializedName(SERIALIZED_NAME_NEXT_INCREMENTAL)
  @javax.annotation.Nullable
  private String nextIncremental;

  public DtoRoutineState() {
  }

  public DtoRoutineState full(@javax.annotation.Nullable DtoRunningJob full) {
    this.full = full;
    return this;
  }

  /**
   * Full represents the state of a full backup. Nil if no full backup is running.
   * @return full
   */
  @javax.annotation.Nullable
  public DtoRunningJob getFull() {
    return full;
  }

  public void setFull(@javax.annotation.Nullable DtoRunningJob full) {
    this.full = full;
  }


  public DtoRoutineState incremental(@javax.annotation.Nullable DtoRunningJob incremental) {
    this.incremental = incremental;
    return this;
  }

  /**
   * Incremental represents the state of an incremental backup. Nil if no incremental backup is running.
   * @return incremental
   */
  @javax.annotation.Nullable
  public DtoRunningJob getIncremental() {
    return incremental;
  }

  public void setIncremental(@javax.annotation.Nullable DtoRunningJob incremental) {
    this.incremental = incremental;
  }


  public DtoRoutineState lastFull(@javax.annotation.Nullable String lastFull) {
    this.lastFull = lastFull;
    return this;
  }

  /**
   * LastFull: the time of the last successful full backup. A nil value indicates that there has never been a full backup.
   * @return lastFull
   */
  @javax.annotation.Nullable
  public String getLastFull() {
    return lastFull;
  }

  public void setLastFull(@javax.annotation.Nullable String lastFull) {
    this.lastFull = lastFull;
  }


  public DtoRoutineState lastIncremental(@javax.annotation.Nullable String lastIncremental) {
    this.lastIncremental = lastIncremental;
    return this;
  }

  /**
   * LastIncremental: the time of the last successful incremental backup. A nil value indicates that there has never been an incremental backup.
   * @return lastIncremental
   */
  @javax.annotation.Nullable
  public String getLastIncremental() {
    return lastIncremental;
  }

  public void setLastIncremental(@javax.annotation.Nullable String lastIncremental) {
    this.lastIncremental = lastIncremental;
  }


  public DtoRoutineState nextFull(@javax.annotation.Nullable String nextFull) {
    this.nextFull = nextFull;
    return this;
  }

  /**
   * NextFull: the time of the next scheduled full backup.
   * @return nextFull
   */
  @javax.annotation.Nullable
  public String getNextFull() {
    return nextFull;
  }

  public void setNextFull(@javax.annotation.Nullable String nextFull) {
    this.nextFull = nextFull;
  }


  public DtoRoutineState nextIncremental(@javax.annotation.Nullable String nextIncremental) {
    this.nextIncremental = nextIncremental;
    return this;
  }

  /**
   * NextIncremental: the time of the next scheduled incremental backup.
   * @return nextIncremental
   */
  @javax.annotation.Nullable
  public String getNextIncremental() {
    return nextIncremental;
  }

  public void setNextIncremental(@javax.annotation.Nullable String nextIncremental) {
    this.nextIncremental = nextIncremental;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoRoutineState dtoRoutineState = (DtoRoutineState) o;
    return Objects.equals(this.full, dtoRoutineState.full) &&
        Objects.equals(this.incremental, dtoRoutineState.incremental) &&
        Objects.equals(this.lastFull, dtoRoutineState.lastFull) &&
        Objects.equals(this.lastIncremental, dtoRoutineState.lastIncremental) &&
        Objects.equals(this.nextFull, dtoRoutineState.nextFull) &&
        Objects.equals(this.nextIncremental, dtoRoutineState.nextIncremental);
  }

  @Override
  public int hashCode() {
    return Objects.hash(full, incremental, lastFull, lastIncremental, nextFull, nextIncremental);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoRoutineState {\n");
    sb.append("    full: ").append(toIndentedString(full)).append("\n");
    sb.append("    incremental: ").append(toIndentedString(incremental)).append("\n");
    sb.append("    lastFull: ").append(toIndentedString(lastFull)).append("\n");
    sb.append("    lastIncremental: ").append(toIndentedString(lastIncremental)).append("\n");
    sb.append("    nextFull: ").append(toIndentedString(nextFull)).append("\n");
    sb.append("    nextIncremental: ").append(toIndentedString(nextIncremental)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("full", "incremental", "last-full", "last-incremental", "next-full", "next-incremental"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoRoutineState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoRoutineState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoRoutineState is not found in the empty JSON string", DtoRoutineState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoRoutineState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoRoutineState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `full`
      if (jsonObj.get("full") != null && !jsonObj.get("full").isJsonNull()) {
        DtoRunningJob.validateJsonElement(jsonObj.get("full"));
      }
      // validate the optional field `incremental`
      if (jsonObj.get("incremental") != null && !jsonObj.get("incremental").isJsonNull()) {
        DtoRunningJob.validateJsonElement(jsonObj.get("incremental"));
      }
      if ((jsonObj.get("last-full") != null && !jsonObj.get("last-full").isJsonNull()) && !jsonObj.get("last-full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last-full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last-full").toString()));
      }
      if ((jsonObj.get("last-incremental") != null && !jsonObj.get("last-incremental").isJsonNull()) && !jsonObj.get("last-incremental").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last-incremental` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last-incremental").toString()));
      }
      if ((jsonObj.get("next-full") != null && !jsonObj.get("next-full").isJsonNull()) && !jsonObj.get("next-full").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next-full` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next-full").toString()));
      }
      if ((jsonObj.get("next-incremental") != null && !jsonObj.get("next-incremental").isJsonNull()) && !jsonObj.get("next-incremental").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next-incremental` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next-incremental").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoRoutineState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoRoutineState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoRoutineState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoRoutineState.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoRoutineState>() {
           @Override
           public void write(JsonWriter out, DtoRoutineState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoRoutineState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoRoutineState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoRoutineState
   * @throws IOException if the JSON string is invalid with respect to DtoRoutineState
   */
  public static DtoRoutineState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoRoutineState.class);
  }

  /**
   * Convert an instance of DtoRoutineState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

