/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * RateLimiterConfig is the HTTP server rate limiter configuration.
 */
public class DtoRateLimiterConfig {
  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  @javax.annotation.Nullable
  private Integer size = 1024;

  public static final String SERIALIZED_NAME_TPS = "tps";
  @SerializedName(SERIALIZED_NAME_TPS)
  @javax.annotation.Nullable
  private Integer tps = 1024;

  public static final String SERIALIZED_NAME_WHITE_LIST = "white-list";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST)
  @javax.annotation.Nullable
  private List<String> whiteList;

  public DtoRateLimiterConfig() {
  }

  public DtoRateLimiterConfig size(@javax.annotation.Nullable Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Rate limiter token bucket size (bursts threshold).
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(@javax.annotation.Nullable Integer size) {
    this.size = size;
  }


  public DtoRateLimiterConfig tps(@javax.annotation.Nullable Integer tps) {
    this.tps = tps;
    return this;
  }

  /**
   * Rate limiter tokens per second threshold.
   * @return tps
   */
  @javax.annotation.Nullable
  public Integer getTps() {
    return tps;
  }

  public void setTps(@javax.annotation.Nullable Integer tps) {
    this.tps = tps;
  }


  public DtoRateLimiterConfig whiteList(@javax.annotation.Nullable List<String> whiteList) {
    this.whiteList = whiteList;
    return this;
  }

  public DtoRateLimiterConfig addWhiteListItem(String whiteListItem) {
    if (this.whiteList == null) {
      this.whiteList = new ArrayList<>();
    }
    this.whiteList.add(whiteListItem);
    return this;
  }

  /**
   * The list of ips to whitelist in rate limiting (optional). Default: allow all.
   * @return whiteList
   */
  @javax.annotation.Nullable
  public List<String> getWhiteList() {
    return whiteList;
  }

  public void setWhiteList(@javax.annotation.Nullable List<String> whiteList) {
    this.whiteList = whiteList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoRateLimiterConfig dtoRateLimiterConfig = (DtoRateLimiterConfig) o;
    return Objects.equals(this.size, dtoRateLimiterConfig.size) &&
        Objects.equals(this.tps, dtoRateLimiterConfig.tps) &&
        Objects.equals(this.whiteList, dtoRateLimiterConfig.whiteList);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, tps, whiteList);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoRateLimiterConfig {\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    tps: ").append(toIndentedString(tps)).append("\n");
    sb.append("    whiteList: ").append(toIndentedString(whiteList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("size", "tps", "white-list"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoRateLimiterConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoRateLimiterConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoRateLimiterConfig is not found in the empty JSON string", DtoRateLimiterConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoRateLimiterConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoRateLimiterConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("white-list") != null && !jsonObj.get("white-list").isJsonNull() && !jsonObj.get("white-list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `white-list` to be an array in the JSON string but got `%s`", jsonObj.get("white-list").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoRateLimiterConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoRateLimiterConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoRateLimiterConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoRateLimiterConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoRateLimiterConfig>() {
           @Override
           public void write(JsonWriter out, DtoRateLimiterConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoRateLimiterConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoRateLimiterConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoRateLimiterConfig
   * @throws IOException if the JSON string is invalid with respect to DtoRateLimiterConfig
   */
  public static DtoRateLimiterConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoRateLimiterConfig.class);
  }

  /**
   * Convert an instance of DtoRateLimiterConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

