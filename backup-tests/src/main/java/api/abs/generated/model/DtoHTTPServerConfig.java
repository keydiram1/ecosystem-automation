/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoRateLimiterConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * HTTPServerConfig represents the service&#39;s HTTP server configuration.
 */
public class DtoHTTPServerConfig {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nullable
  private String address = "0.0.0.0";

  public static final String SERIALIZED_NAME_CONTEXT_PATH = "context-path";
  @SerializedName(SERIALIZED_NAME_CONTEXT_PATH)
  @javax.annotation.Nullable
  private String contextPath = "/";

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nullable
  private Integer port = 8080;

  public static final String SERIALIZED_NAME_RATE = "rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  @javax.annotation.Nullable
  private DtoRateLimiterConfig rate;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nullable
  private Integer timeout = 5000;

  public DtoHTTPServerConfig() {
  }

  public DtoHTTPServerConfig address(@javax.annotation.Nullable String address) {
    this.address = address;
    return this;
  }

  /**
   * The address to listen on.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nullable String address) {
    this.address = address;
  }


  public DtoHTTPServerConfig contextPath(@javax.annotation.Nullable String contextPath) {
    this.contextPath = contextPath;
    return this;
  }

  /**
   * ContextPath customizes path for the API endpoints.
   * @return contextPath
   */
  @javax.annotation.Nullable
  public String getContextPath() {
    return contextPath;
  }

  public void setContextPath(@javax.annotation.Nullable String contextPath) {
    this.contextPath = contextPath;
  }


  public DtoHTTPServerConfig port(@javax.annotation.Nullable Integer port) {
    this.port = port;
    return this;
  }

  /**
   * The port to listen on.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(@javax.annotation.Nullable Integer port) {
    this.port = port;
  }


  public DtoHTTPServerConfig rate(@javax.annotation.Nullable DtoRateLimiterConfig rate) {
    this.rate = rate;
    return this;
  }

  /**
   * HTTP rate limiter configuration.
   * @return rate
   */
  @javax.annotation.Nullable
  public DtoRateLimiterConfig getRate() {
    return rate;
  }

  public void setRate(@javax.annotation.Nullable DtoRateLimiterConfig rate) {
    this.rate = rate;
  }


  public DtoHTTPServerConfig timeout(@javax.annotation.Nullable Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Timeout for http server operations in milliseconds.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nullable Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoHTTPServerConfig dtoHTTPServerConfig = (DtoHTTPServerConfig) o;
    return Objects.equals(this.address, dtoHTTPServerConfig.address) &&
        Objects.equals(this.contextPath, dtoHTTPServerConfig.contextPath) &&
        Objects.equals(this.port, dtoHTTPServerConfig.port) &&
        Objects.equals(this.rate, dtoHTTPServerConfig.rate) &&
        Objects.equals(this.timeout, dtoHTTPServerConfig.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, contextPath, port, rate, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoHTTPServerConfig {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    contextPath: ").append(toIndentedString(contextPath)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("address", "context-path", "port", "rate", "timeout"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoHTTPServerConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoHTTPServerConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoHTTPServerConfig is not found in the empty JSON string", DtoHTTPServerConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoHTTPServerConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoHTTPServerConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("context-path") != null && !jsonObj.get("context-path").isJsonNull()) && !jsonObj.get("context-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context-path").toString()));
      }
      // validate the optional field `rate`
      if (jsonObj.get("rate") != null && !jsonObj.get("rate").isJsonNull()) {
        DtoRateLimiterConfig.validateJsonElement(jsonObj.get("rate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoHTTPServerConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoHTTPServerConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoHTTPServerConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoHTTPServerConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoHTTPServerConfig>() {
           @Override
           public void write(JsonWriter out, DtoHTTPServerConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoHTTPServerConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoHTTPServerConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoHTTPServerConfig
   * @throws IOException if the JSON string is invalid with respect to DtoHTTPServerConfig
   */
  public static DtoHTTPServerConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoHTTPServerConfig.class);
  }

  /**
   * Convert an instance of DtoHTTPServerConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

