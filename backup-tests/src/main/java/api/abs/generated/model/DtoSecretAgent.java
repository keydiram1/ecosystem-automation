/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * SecretAgent represents the configuration of an Aerospike Secret Agent.
 */
public class DtoSecretAgent {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private String address;

  /**
   * Connection type.
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    TCP("tcp"),
    
    UNIX("unix");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connection-type";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  @javax.annotation.Nonnull
  private ConnectionTypeEnum connectionType;

  public static final String SERIALIZED_NAME_IS_BASE64 = "is-base64";
  @SerializedName(SERIALIZED_NAME_IS_BASE64)
  @javax.annotation.Nullable
  private Boolean isBase64 = false;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nullable
  private Integer port;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nullable
  private Integer timeout = 1000;

  public static final String SERIALIZED_NAME_TLS_CA_FILE = "tls-ca-file";
  @SerializedName(SERIALIZED_NAME_TLS_CA_FILE)
  @javax.annotation.Nullable
  private String tlsCaFile;

  public DtoSecretAgent() {
  }

  public DtoSecretAgent address(@javax.annotation.Nonnull String address) {
    this.address = address;
    return this;
  }

  /**
   * Address of the Secret Agent.
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull String address) {
    this.address = address;
  }


  public DtoSecretAgent connectionType(@javax.annotation.Nonnull ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Connection type.
   * @return connectionType
   */
  @javax.annotation.Nonnull
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(@javax.annotation.Nonnull ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
  }


  public DtoSecretAgent isBase64(@javax.annotation.Nullable Boolean isBase64) {
    this.isBase64 = isBase64;
    return this;
  }

  /**
   * Flag that shows if secret agent responses are encrypted with base64.
   * @return isBase64
   */
  @javax.annotation.Nullable
  public Boolean getIsBase64() {
    return isBase64;
  }

  public void setIsBase64(@javax.annotation.Nullable Boolean isBase64) {
    this.isBase64 = isBase64;
  }


  public DtoSecretAgent port(@javax.annotation.Nullable Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Port the Secret Agent is running on.
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(@javax.annotation.Nullable Integer port) {
    this.port = port;
  }


  public DtoSecretAgent timeout(@javax.annotation.Nullable Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Timeout in milliseconds.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nullable Integer timeout) {
    this.timeout = timeout;
  }


  public DtoSecretAgent tlsCaFile(@javax.annotation.Nullable String tlsCaFile) {
    this.tlsCaFile = tlsCaFile;
    return this;
  }

  /**
   * The path to a trusted CA certificate file in PEM format.
   * @return tlsCaFile
   */
  @javax.annotation.Nullable
  public String getTlsCaFile() {
    return tlsCaFile;
  }

  public void setTlsCaFile(@javax.annotation.Nullable String tlsCaFile) {
    this.tlsCaFile = tlsCaFile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoSecretAgent dtoSecretAgent = (DtoSecretAgent) o;
    return Objects.equals(this.address, dtoSecretAgent.address) &&
        Objects.equals(this.connectionType, dtoSecretAgent.connectionType) &&
        Objects.equals(this.isBase64, dtoSecretAgent.isBase64) &&
        Objects.equals(this.port, dtoSecretAgent.port) &&
        Objects.equals(this.timeout, dtoSecretAgent.timeout) &&
        Objects.equals(this.tlsCaFile, dtoSecretAgent.tlsCaFile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, connectionType, isBase64, port, timeout, tlsCaFile);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoSecretAgent {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    isBase64: ").append(toIndentedString(isBase64)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    tlsCaFile: ").append(toIndentedString(tlsCaFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("address", "connection-type", "is-base64", "port", "timeout", "tls-ca-file"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("address", "connection-type"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoSecretAgent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoSecretAgent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoSecretAgent is not found in the empty JSON string", DtoSecretAgent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoSecretAgent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoSecretAgent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtoSecretAgent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("connection-type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection-type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection-type").toString()));
      }
      // validate the required field `connection-type`
      ConnectionTypeEnum.validateJsonElement(jsonObj.get("connection-type"));
      if ((jsonObj.get("tls-ca-file") != null && !jsonObj.get("tls-ca-file").isJsonNull()) && !jsonObj.get("tls-ca-file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tls-ca-file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tls-ca-file").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoSecretAgent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoSecretAgent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoSecretAgent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoSecretAgent.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoSecretAgent>() {
           @Override
           public void write(JsonWriter out, DtoSecretAgent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoSecretAgent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoSecretAgent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoSecretAgent
   * @throws IOException if the JSON string is invalid with respect to DtoSecretAgent
   */
  public static DtoSecretAgent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoSecretAgent.class);
  }

  /**
   * Convert an instance of DtoSecretAgent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

