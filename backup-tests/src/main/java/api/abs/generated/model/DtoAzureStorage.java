/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoAzureStorageClass;
import api.abs.generated.model.DtoSecretAgent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * AzureStorage represents the configuration for Azure Blob storage.
 */
public class DtoAzureStorage {
  public static final String SERIALIZED_NAME_ACCOUNT_KEY = "account-key";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_KEY)
  @javax.annotation.Nullable
  private String accountKey;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "account-name";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  @javax.annotation.Nullable
  private String accountName;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client-id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  @javax.annotation.Nullable
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "client-secret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  @javax.annotation.Nullable
  private String clientSecret;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "container-name";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  @javax.annotation.Nonnull
  private String containerName;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  @javax.annotation.Nonnull
  private String endpoint;

  public static final String SERIALIZED_NAME_MIN_PART_SIZE = "min-part-size";
  @SerializedName(SERIALIZED_NAME_MIN_PART_SIZE)
  @javax.annotation.Nullable
  private Integer minPartSize = 5242880;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_SECRET_AGENT = "secret-agent";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT)
  @javax.annotation.Nullable
  private DtoSecretAgent secretAgent;

  public static final String SERIALIZED_NAME_SECRET_AGENT_NAME = "secret-agent-name";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT_NAME)
  @javax.annotation.Nullable
  private String secretAgentName;

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storage-class";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  @javax.annotation.Nullable
  private DtoAzureStorageClass storageClass;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant-id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  @javax.annotation.Nullable
  private String tenantId;

  public DtoAzureStorage() {
  }

  public DtoAzureStorage accountKey(@javax.annotation.Nullable String accountKey) {
    this.accountKey = accountKey;
    return this;
  }

  /**
   * AccountKey is the Azure storage account key for Shared Key authentication. This is sensitive information. Can be a path in secret agent or an actual value.
   * @return accountKey
   */
  @javax.annotation.Nullable
  public String getAccountKey() {
    return accountKey;
  }

  public void setAccountKey(@javax.annotation.Nullable String accountKey) {
    this.accountKey = accountKey;
  }


  public DtoAzureStorage accountName(@javax.annotation.Nullable String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * AccountName is the Azure storage account name for Shared Key authentication.
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(@javax.annotation.Nullable String accountName) {
    this.accountName = accountName;
  }


  public DtoAzureStorage clientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * ClientID is the Azure Active Directory client ID for AAD authentication.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(@javax.annotation.Nullable String clientId) {
    this.clientId = clientId;
  }


  public DtoAzureStorage clientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * ClientSecret is the Azure Active Directory client secret for AAD authentication. This is sensitive information. Can be a path in secret agent or an actual value.
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(@javax.annotation.Nullable String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public DtoAzureStorage containerName(@javax.annotation.Nonnull String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * ContainerName is the name of the Azure Blob container.
   * @return containerName
   */
  @javax.annotation.Nonnull
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(@javax.annotation.Nonnull String containerName) {
    this.containerName = containerName;
  }


  public DtoAzureStorage endpoint(@javax.annotation.Nonnull String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Endpoint is the Azure Blob service endpoint URL.
   * @return endpoint
   */
  @javax.annotation.Nonnull
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(@javax.annotation.Nonnull String endpoint) {
    this.endpoint = endpoint;
  }


  public DtoAzureStorage minPartSize(@javax.annotation.Nullable Integer minPartSize) {
    this.minPartSize = minPartSize;
    return this;
  }

  /**
   * The minimum size in bytes of individual Azure Blob chunks.
   * minimum: 1048576
   * @return minPartSize
   */
  @javax.annotation.Nullable
  public Integer getMinPartSize() {
    return minPartSize;
  }

  public void setMinPartSize(@javax.annotation.Nullable Integer minPartSize) {
    this.minPartSize = minPartSize;
  }


  public DtoAzureStorage path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * Path is the root path for the backup repository within the container. If not specified, backups will be saved in the container&#39;s root.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public DtoAzureStorage secretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Mutually exclusive with &#39;secret-agent-name&#39;.
   * @return secretAgent
   */
  @javax.annotation.Nullable
  public DtoSecretAgent getSecretAgent() {
    return secretAgent;
  }

  public void setSecretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
  }


  public DtoAzureStorage secretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Link to one of preconfigured agents. Mutually exclusive with &#39;secret-agent&#39;.
   * @return secretAgentName
   */
  @javax.annotation.Nullable
  public String getSecretAgentName() {
    return secretAgentName;
  }

  public void setSecretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
  }


  public DtoAzureStorage storageClass(@javax.annotation.Nullable DtoAzureStorageClass storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * StorageClass defines the storage tier for data and metadata objects.
   * @return storageClass
   */
  @javax.annotation.Nullable
  public DtoAzureStorageClass getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(@javax.annotation.Nullable DtoAzureStorageClass storageClass) {
    this.storageClass = storageClass;
  }


  public DtoAzureStorage tenantId(@javax.annotation.Nullable String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * TenantID is the Azure Active Directory tenant ID for AAD authentication.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(@javax.annotation.Nullable String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoAzureStorage dtoAzureStorage = (DtoAzureStorage) o;
    return Objects.equals(this.accountKey, dtoAzureStorage.accountKey) &&
        Objects.equals(this.accountName, dtoAzureStorage.accountName) &&
        Objects.equals(this.clientId, dtoAzureStorage.clientId) &&
        Objects.equals(this.clientSecret, dtoAzureStorage.clientSecret) &&
        Objects.equals(this.containerName, dtoAzureStorage.containerName) &&
        Objects.equals(this.endpoint, dtoAzureStorage.endpoint) &&
        Objects.equals(this.minPartSize, dtoAzureStorage.minPartSize) &&
        Objects.equals(this.path, dtoAzureStorage.path) &&
        Objects.equals(this.secretAgent, dtoAzureStorage.secretAgent) &&
        Objects.equals(this.secretAgentName, dtoAzureStorage.secretAgentName) &&
        Objects.equals(this.storageClass, dtoAzureStorage.storageClass) &&
        Objects.equals(this.tenantId, dtoAzureStorage.tenantId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountKey, accountName, clientId, clientSecret, containerName, endpoint, minPartSize, path, secretAgent, secretAgentName, storageClass, tenantId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoAzureStorage {\n");
    sb.append("    accountKey: ").append(toIndentedString(accountKey)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    minPartSize: ").append(toIndentedString(minPartSize)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    secretAgent: ").append(toIndentedString(secretAgent)).append("\n");
    sb.append("    secretAgentName: ").append(toIndentedString(secretAgentName)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("account-key", "account-name", "client-id", "client-secret", "container-name", "endpoint", "min-part-size", "path", "secret-agent", "secret-agent-name", "storage-class", "tenant-id"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("container-name", "endpoint"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoAzureStorage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoAzureStorage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoAzureStorage is not found in the empty JSON string", DtoAzureStorage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoAzureStorage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoAzureStorage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtoAzureStorage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account-key") != null && !jsonObj.get("account-key").isJsonNull()) && !jsonObj.get("account-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-key").toString()));
      }
      if ((jsonObj.get("account-name") != null && !jsonObj.get("account-name").isJsonNull()) && !jsonObj.get("account-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account-name").toString()));
      }
      if ((jsonObj.get("client-id") != null && !jsonObj.get("client-id").isJsonNull()) && !jsonObj.get("client-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-id").toString()));
      }
      if ((jsonObj.get("client-secret") != null && !jsonObj.get("client-secret").isJsonNull()) && !jsonObj.get("client-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client-secret").toString()));
      }
      if (!jsonObj.get("container-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container-name").toString()));
      }
      if (!jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `secret-agent`
      if (jsonObj.get("secret-agent") != null && !jsonObj.get("secret-agent").isJsonNull()) {
        DtoSecretAgent.validateJsonElement(jsonObj.get("secret-agent"));
      }
      if ((jsonObj.get("secret-agent-name") != null && !jsonObj.get("secret-agent-name").isJsonNull()) && !jsonObj.get("secret-agent-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret-agent-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret-agent-name").toString()));
      }
      // validate the optional field `storage-class`
      if (jsonObj.get("storage-class") != null && !jsonObj.get("storage-class").isJsonNull()) {
        DtoAzureStorageClass.validateJsonElement(jsonObj.get("storage-class"));
      }
      if ((jsonObj.get("tenant-id") != null && !jsonObj.get("tenant-id").isJsonNull()) && !jsonObj.get("tenant-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant-id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoAzureStorage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoAzureStorage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoAzureStorage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoAzureStorage.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoAzureStorage>() {
           @Override
           public void write(JsonWriter out, DtoAzureStorage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoAzureStorage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoAzureStorage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoAzureStorage
   * @throws IOException if the JSON string is invalid with respect to DtoAzureStorage
   */
  public static DtoAzureStorage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoAzureStorage.class);
  }

  /**
   * Convert an instance of DtoAzureStorage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

