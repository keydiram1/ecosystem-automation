/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoSecretAgent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * Credentials represents authentication details to the Aerospike cluster.
 */
public class DtoCredentials {
  /**
   * The authentication mode string (INTERNAL, EXTERNAL, PKI).
   */
  @JsonAdapter(AuthModeEnum.Adapter.class)
  public enum AuthModeEnum {
    INTERNAL("INTERNAL"),
    
    EXTERNAL("EXTERNAL"),
    
    PKI("PKI");

    private String value;

    AuthModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthModeEnum fromValue(String value) {
      for (AuthModeEnum b : AuthModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTH_MODE = "auth-mode";
  @SerializedName(SERIALIZED_NAME_AUTH_MODE)
  @javax.annotation.Nullable
  private AuthModeEnum authMode = AuthModeEnum.INTERNAL;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_PATH = "password-path";
  @SerializedName(SERIALIZED_NAME_PASSWORD_PATH)
  @javax.annotation.Nullable
  private String passwordPath;

  public static final String SERIALIZED_NAME_SECRET_AGENT = "secret-agent";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT)
  @javax.annotation.Nullable
  private DtoSecretAgent secretAgent;

  public static final String SERIALIZED_NAME_SECRET_AGENT_NAME = "secret-agent-name";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT_NAME)
  @javax.annotation.Nullable
  private String secretAgentName;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private String user;

  public DtoCredentials() {
  }

  public DtoCredentials authMode(@javax.annotation.Nullable AuthModeEnum authMode) {
    this.authMode = authMode;
    return this;
  }

  /**
   * The authentication mode string (INTERNAL, EXTERNAL, PKI).
   * @return authMode
   */
  @javax.annotation.Nullable
  public AuthModeEnum getAuthMode() {
    return authMode;
  }

  public void setAuthMode(@javax.annotation.Nullable AuthModeEnum authMode) {
    this.authMode = authMode;
  }


  public DtoCredentials password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * The password for the cluster authentication. It can be either plain text or path into the secret agent.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public DtoCredentials passwordPath(@javax.annotation.Nullable String passwordPath) {
    this.passwordPath = passwordPath;
    return this;
  }

  /**
   * The file path with the password string.
   * @return passwordPath
   */
  @javax.annotation.Nullable
  public String getPasswordPath() {
    return passwordPath;
  }

  public void setPasswordPath(@javax.annotation.Nullable String passwordPath) {
    this.passwordPath = passwordPath;
  }


  public DtoCredentials secretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Mutually exclusive with &#39;secret-agent-name&#39;.
   * @return secretAgent
   */
  @javax.annotation.Nullable
  public DtoSecretAgent getSecretAgent() {
    return secretAgent;
  }

  public void setSecretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
  }


  public DtoCredentials secretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Link to one of preconfigured agents. Mutually exclusive with &#39;secret-agent&#39;.
   * @return secretAgentName
   */
  @javax.annotation.Nullable
  public String getSecretAgentName() {
    return secretAgentName;
  }

  public void setSecretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
  }


  public DtoCredentials user(@javax.annotation.Nullable String user) {
    this.user = user;
    return this;
  }

  /**
   * The username for the cluster authentication.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoCredentials dtoCredentials = (DtoCredentials) o;
    return Objects.equals(this.authMode, dtoCredentials.authMode) &&
        Objects.equals(this.password, dtoCredentials.password) &&
        Objects.equals(this.passwordPath, dtoCredentials.passwordPath) &&
        Objects.equals(this.secretAgent, dtoCredentials.secretAgent) &&
        Objects.equals(this.secretAgentName, dtoCredentials.secretAgentName) &&
        Objects.equals(this.user, dtoCredentials.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMode, password, passwordPath, secretAgent, secretAgentName, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoCredentials {\n");
    sb.append("    authMode: ").append(toIndentedString(authMode)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordPath: ").append(toIndentedString(passwordPath)).append("\n");
    sb.append("    secretAgent: ").append(toIndentedString(secretAgent)).append("\n");
    sb.append("    secretAgentName: ").append(toIndentedString(secretAgentName)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("auth-mode", "password", "password-path", "secret-agent", "secret-agent-name", "user"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoCredentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoCredentials is not found in the empty JSON string", DtoCredentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoCredentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoCredentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth-mode") != null && !jsonObj.get("auth-mode").isJsonNull()) && !jsonObj.get("auth-mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth-mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth-mode").toString()));
      }
      // validate the optional field `auth-mode`
      if (jsonObj.get("auth-mode") != null && !jsonObj.get("auth-mode").isJsonNull()) {
        AuthModeEnum.validateJsonElement(jsonObj.get("auth-mode"));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("password-path") != null && !jsonObj.get("password-path").isJsonNull()) && !jsonObj.get("password-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password-path").toString()));
      }
      // validate the optional field `secret-agent`
      if (jsonObj.get("secret-agent") != null && !jsonObj.get("secret-agent").isJsonNull()) {
        DtoSecretAgent.validateJsonElement(jsonObj.get("secret-agent"));
      }
      if ((jsonObj.get("secret-agent-name") != null && !jsonObj.get("secret-agent-name").isJsonNull()) && !jsonObj.get("secret-agent-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret-agent-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret-agent-name").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoCredentials>() {
           @Override
           public void write(JsonWriter out, DtoCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoCredentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoCredentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoCredentials
   * @throws IOException if the JSON string is invalid with respect to DtoCredentials
   */
  public static DtoCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoCredentials.class);
  }

  /**
   * Convert an instance of DtoCredentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

