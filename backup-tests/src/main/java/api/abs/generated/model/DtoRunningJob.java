/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoMetrics;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * RunningJob tracks progress of currently running job.
 */
public class DtoRunningJob {
  public static final String SERIALIZED_NAME_DONE_RECORDS = "done-records";
  @SerializedName(SERIALIZED_NAME_DONE_RECORDS)
  @javax.annotation.Nullable
  private Integer doneRecords;

  public static final String SERIALIZED_NAME_ESTIMATED_END_TIME = "estimated-end-time";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_END_TIME)
  @javax.annotation.Nullable
  private String estimatedEndTime;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finish-time";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  @javax.annotation.Nullable
  private String finishTime;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  @javax.annotation.Nullable
  private DtoMetrics metrics;

  public static final String SERIALIZED_NAME_PERCENTAGE_DONE = "percentage-done";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_DONE)
  @javax.annotation.Nullable
  private Integer percentageDone;

  public static final String SERIALIZED_NAME_START_TIME = "start-time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nullable
  private String startTime;

  public static final String SERIALIZED_NAME_TOTAL_RECORDS = "total-records";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORDS)
  @javax.annotation.Nullable
  private Integer totalRecords;

  public DtoRunningJob() {
  }

  public DtoRunningJob doneRecords(@javax.annotation.Nullable Integer doneRecords) {
    this.doneRecords = doneRecords;
    return this;
  }

  /**
   * The number of records that have been successfully done.
   * @return doneRecords
   */
  @javax.annotation.Nullable
  public Integer getDoneRecords() {
    return doneRecords;
  }

  public void setDoneRecords(@javax.annotation.Nullable Integer doneRecords) {
    this.doneRecords = doneRecords;
  }


  public DtoRunningJob estimatedEndTime(@javax.annotation.Nullable String estimatedEndTime) {
    this.estimatedEndTime = estimatedEndTime;
    return this;
  }

  /**
   * The estimated time when the backup operation will be completed. It is calculated based on the current percentage done and duration. A nil value indicates that the estimation is not available yet.
   * @return estimatedEndTime
   */
  @javax.annotation.Nullable
  public String getEstimatedEndTime() {
    return estimatedEndTime;
  }

  public void setEstimatedEndTime(@javax.annotation.Nullable String estimatedEndTime) {
    this.estimatedEndTime = estimatedEndTime;
  }


  public DtoRunningJob finishTime(@javax.annotation.Nullable String finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  /**
   * The time when the operation finished. A nil value indicates that the operation is still running.
   * @return finishTime
   */
  @javax.annotation.Nullable
  public String getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(@javax.annotation.Nullable String finishTime) {
    this.finishTime = finishTime;
  }


  public DtoRunningJob metrics(@javax.annotation.Nullable DtoMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Metrics provides real-time information about data flow performance.
   * @return metrics
   */
  @javax.annotation.Nullable
  public DtoMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(@javax.annotation.Nullable DtoMetrics metrics) {
    this.metrics = metrics;
  }


  public DtoRunningJob percentageDone(@javax.annotation.Nullable Integer percentageDone) {
    this.percentageDone = percentageDone;
    return this;
  }

  /**
   * The progress of the backup operation as a percentage.
   * @return percentageDone
   */
  @javax.annotation.Nullable
  public Integer getPercentageDone() {
    return percentageDone;
  }

  public void setPercentageDone(@javax.annotation.Nullable Integer percentageDone) {
    this.percentageDone = percentageDone;
  }


  public DtoRunningJob startTime(@javax.annotation.Nullable String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time when the operation started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nullable String startTime) {
    this.startTime = startTime;
  }


  public DtoRunningJob totalRecords(@javax.annotation.Nullable Integer totalRecords) {
    this.totalRecords = totalRecords;
    return this;
  }

  /**
   * The total number of records to be processed.
   * @return totalRecords
   */
  @javax.annotation.Nullable
  public Integer getTotalRecords() {
    return totalRecords;
  }

  public void setTotalRecords(@javax.annotation.Nullable Integer totalRecords) {
    this.totalRecords = totalRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoRunningJob dtoRunningJob = (DtoRunningJob) o;
    return Objects.equals(this.doneRecords, dtoRunningJob.doneRecords) &&
        Objects.equals(this.estimatedEndTime, dtoRunningJob.estimatedEndTime) &&
        Objects.equals(this.finishTime, dtoRunningJob.finishTime) &&
        Objects.equals(this.metrics, dtoRunningJob.metrics) &&
        Objects.equals(this.percentageDone, dtoRunningJob.percentageDone) &&
        Objects.equals(this.startTime, dtoRunningJob.startTime) &&
        Objects.equals(this.totalRecords, dtoRunningJob.totalRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doneRecords, estimatedEndTime, finishTime, metrics, percentageDone, startTime, totalRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoRunningJob {\n");
    sb.append("    doneRecords: ").append(toIndentedString(doneRecords)).append("\n");
    sb.append("    estimatedEndTime: ").append(toIndentedString(estimatedEndTime)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    percentageDone: ").append(toIndentedString(percentageDone)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    totalRecords: ").append(toIndentedString(totalRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("done-records", "estimated-end-time", "finish-time", "metrics", "percentage-done", "start-time", "total-records"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoRunningJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoRunningJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoRunningJob is not found in the empty JSON string", DtoRunningJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoRunningJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoRunningJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("estimated-end-time") != null && !jsonObj.get("estimated-end-time").isJsonNull()) && !jsonObj.get("estimated-end-time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimated-end-time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimated-end-time").toString()));
      }
      if ((jsonObj.get("finish-time") != null && !jsonObj.get("finish-time").isJsonNull()) && !jsonObj.get("finish-time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finish-time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finish-time").toString()));
      }
      // validate the optional field `metrics`
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        DtoMetrics.validateJsonElement(jsonObj.get("metrics"));
      }
      if ((jsonObj.get("start-time") != null && !jsonObj.get("start-time").isJsonNull()) && !jsonObj.get("start-time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start-time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start-time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoRunningJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoRunningJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoRunningJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoRunningJob.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoRunningJob>() {
           @Override
           public void write(JsonWriter out, DtoRunningJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoRunningJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoRunningJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoRunningJob
   * @throws IOException if the JSON string is invalid with respect to DtoRunningJob
   */
  public static DtoRunningJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoRunningJob.class);
  }

  /**
   * Convert an instance of DtoRunningJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

