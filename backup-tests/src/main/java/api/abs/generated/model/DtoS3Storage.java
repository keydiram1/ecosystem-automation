/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoS3StorageClass;
import api.abs.generated.model.DtoSecretAgent;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * S3Storage represents the configuration for S3 storage.
 */
public class DtoS3Storage {
  public static final String SERIALIZED_NAME_ACCESS_KEY_ID = "access-key-id";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY_ID)
  @javax.annotation.Nullable
  private String accessKeyId;

  public static final String SERIALIZED_NAME_BUCKET = "bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  @javax.annotation.Nonnull
  private String bucket;

  public static final String SERIALIZED_NAME_MAX_ASYNC_CONNECTIONS = "max-async-connections";
  @SerializedName(SERIALIZED_NAME_MAX_ASYNC_CONNECTIONS)
  @javax.annotation.Nullable
  private Integer maxAsyncConnections;

  public static final String SERIALIZED_NAME_MIN_PART_SIZE = "min-part-size";
  @SerializedName(SERIALIZED_NAME_MIN_PART_SIZE)
  @javax.annotation.Nullable
  private Integer minPartSize = 5242880;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nullable
  private String path;

  public static final String SERIALIZED_NAME_S3_ENDPOINT_OVERRIDE = "s3-endpoint-override";
  @SerializedName(SERIALIZED_NAME_S3_ENDPOINT_OVERRIDE)
  @javax.annotation.Nullable
  private String s3EndpointOverride;

  /**
   * The log level of the AWS S3 SDK (AWS S3 optional).
   */
  @JsonAdapter(S3LogLevelEnum.Adapter.class)
  public enum S3LogLevelEnum {
    OFF("OFF"),
    
    FATAL("FATAL"),
    
    ERROR("ERROR"),
    
    WARN("WARN"),
    
    INFO("INFO"),
    
    DEBUG("DEBUG"),
    
    TRACE("TRACE");

    private String value;

    S3LogLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static S3LogLevelEnum fromValue(String value) {
      for (S3LogLevelEnum b : S3LogLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<S3LogLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final S3LogLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public S3LogLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return S3LogLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      S3LogLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_S3_LOG_LEVEL = "s3-log-level";
  @SerializedName(SERIALIZED_NAME_S3_LOG_LEVEL)
  @javax.annotation.Nullable
  private S3LogLevelEnum s3LogLevel = S3LogLevelEnum.FATAL;

  public static final String SERIALIZED_NAME_S3_PROFILE = "s3-profile";
  @SerializedName(SERIALIZED_NAME_S3_PROFILE)
  @javax.annotation.Nullable
  private String s3Profile;

  public static final String SERIALIZED_NAME_S3_REGION = "s3-region";
  @SerializedName(SERIALIZED_NAME_S3_REGION)
  @javax.annotation.Nonnull
  private String s3Region;

  public static final String SERIALIZED_NAME_SECRET_ACCESS_KEY = "secret-access-key";
  @SerializedName(SERIALIZED_NAME_SECRET_ACCESS_KEY)
  @javax.annotation.Nullable
  private String secretAccessKey;

  public static final String SERIALIZED_NAME_SECRET_AGENT = "secret-agent";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT)
  @javax.annotation.Nullable
  private DtoSecretAgent secretAgent;

  public static final String SERIALIZED_NAME_SECRET_AGENT_NAME = "secret-agent-name";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT_NAME)
  @javax.annotation.Nullable
  private String secretAgentName;

  public static final String SERIALIZED_NAME_STORAGE_CLASS = "storage-class";
  @SerializedName(SERIALIZED_NAME_STORAGE_CLASS)
  @javax.annotation.Nullable
  private DtoS3StorageClass storageClass;

  public DtoS3Storage() {
  }

  public DtoS3Storage accessKeyId(@javax.annotation.Nullable String accessKeyId) {
    this.accessKeyId = accessKeyId;
    return this;
  }

  /**
   * Access Key ID for authentication with S3 StaticCredentialsProvider. This is sensitive information. Can be a path in secret agent or an actual value.
   * @return accessKeyId
   */
  @javax.annotation.Nullable
  public String getAccessKeyId() {
    return accessKeyId;
  }

  public void setAccessKeyId(@javax.annotation.Nullable String accessKeyId) {
    this.accessKeyId = accessKeyId;
  }


  public DtoS3Storage bucket(@javax.annotation.Nonnull String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * The S3 bucket name.
   * @return bucket
   */
  @javax.annotation.Nonnull
  public String getBucket() {
    return bucket;
  }

  public void setBucket(@javax.annotation.Nonnull String bucket) {
    this.bucket = bucket;
  }


  public DtoS3Storage maxAsyncConnections(@javax.annotation.Nullable Integer maxAsyncConnections) {
    this.maxAsyncConnections = maxAsyncConnections;
    return this;
  }

  /**
   * The maximum number of simultaneous requests from S3.
   * @return maxAsyncConnections
   */
  @javax.annotation.Nullable
  public Integer getMaxAsyncConnections() {
    return maxAsyncConnections;
  }

  public void setMaxAsyncConnections(@javax.annotation.Nullable Integer maxAsyncConnections) {
    this.maxAsyncConnections = maxAsyncConnections;
  }


  public DtoS3Storage minPartSize(@javax.annotation.Nullable Integer minPartSize) {
    this.minPartSize = minPartSize;
    return this;
  }

  /**
   * The minimum size in bytes of individual S3 UploadParts.
   * minimum: 5242880
   * @return minPartSize
   */
  @javax.annotation.Nullable
  public Integer getMinPartSize() {
    return minPartSize;
  }

  public void setMinPartSize(@javax.annotation.Nullable Integer minPartSize) {
    this.minPartSize = minPartSize;
  }


  public DtoS3Storage path(@javax.annotation.Nullable String path) {
    this.path = path;
    return this;
  }

  /**
   * The root path for the backup repository within the bucket. If not specified, backups will be saved in the bucket&#39;s root.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nullable String path) {
    this.path = path;
  }


  public DtoS3Storage s3EndpointOverride(@javax.annotation.Nullable String s3EndpointOverride) {
    this.s3EndpointOverride = s3EndpointOverride;
    return this;
  }

  /**
   * An alternative endpoint for the S3 SDK to communicate (AWS S3 optional).
   * @return s3EndpointOverride
   */
  @javax.annotation.Nullable
  public String getS3EndpointOverride() {
    return s3EndpointOverride;
  }

  public void setS3EndpointOverride(@javax.annotation.Nullable String s3EndpointOverride) {
    this.s3EndpointOverride = s3EndpointOverride;
  }


  public DtoS3Storage s3LogLevel(@javax.annotation.Nullable S3LogLevelEnum s3LogLevel) {
    this.s3LogLevel = s3LogLevel;
    return this;
  }

  /**
   * The log level of the AWS S3 SDK (AWS S3 optional).
   * @return s3LogLevel
   */
  @javax.annotation.Nullable
  public S3LogLevelEnum getS3LogLevel() {
    return s3LogLevel;
  }

  public void setS3LogLevel(@javax.annotation.Nullable S3LogLevelEnum s3LogLevel) {
    this.s3LogLevel = s3LogLevel;
  }


  public DtoS3Storage s3Profile(@javax.annotation.Nullable String s3Profile) {
    this.s3Profile = s3Profile;
    return this;
  }

  /**
   * The S3 profile name (AWS S3 optional).
   * @return s3Profile
   */
  @javax.annotation.Nullable
  public String getS3Profile() {
    return s3Profile;
  }

  public void setS3Profile(@javax.annotation.Nullable String s3Profile) {
    this.s3Profile = s3Profile;
  }


  public DtoS3Storage s3Region(@javax.annotation.Nonnull String s3Region) {
    this.s3Region = s3Region;
    return this;
  }

  /**
   * The S3 region string.
   * @return s3Region
   */
  @javax.annotation.Nonnull
  public String getS3Region() {
    return s3Region;
  }

  public void setS3Region(@javax.annotation.Nonnull String s3Region) {
    this.s3Region = s3Region;
  }


  public DtoS3Storage secretAccessKey(@javax.annotation.Nullable String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
    return this;
  }

  /**
   * Secret Access Key for authentication with S3 StaticCredentialsProvider. This is sensitive information. Can be a path in secret agent or an actual value.
   * @return secretAccessKey
   */
  @javax.annotation.Nullable
  public String getSecretAccessKey() {
    return secretAccessKey;
  }

  public void setSecretAccessKey(@javax.annotation.Nullable String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
  }


  public DtoS3Storage secretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Mutually exclusive with &#39;secret-agent-name&#39;.
   * @return secretAgent
   */
  @javax.annotation.Nullable
  public DtoSecretAgent getSecretAgent() {
    return secretAgent;
  }

  public void setSecretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
  }


  public DtoS3Storage secretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Link to one of preconfigured agents. Mutually exclusive with &#39;secret-agent&#39;.
   * @return secretAgentName
   */
  @javax.annotation.Nullable
  public String getSecretAgentName() {
    return secretAgentName;
  }

  public void setSecretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
  }


  public DtoS3Storage storageClass(@javax.annotation.Nullable DtoS3StorageClass storageClass) {
    this.storageClass = storageClass;
    return this;
  }

  /**
   * StorageClass defines the storage class for data and metadata objects.
   * @return storageClass
   */
  @javax.annotation.Nullable
  public DtoS3StorageClass getStorageClass() {
    return storageClass;
  }

  public void setStorageClass(@javax.annotation.Nullable DtoS3StorageClass storageClass) {
    this.storageClass = storageClass;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoS3Storage dtoS3Storage = (DtoS3Storage) o;
    return Objects.equals(this.accessKeyId, dtoS3Storage.accessKeyId) &&
        Objects.equals(this.bucket, dtoS3Storage.bucket) &&
        Objects.equals(this.maxAsyncConnections, dtoS3Storage.maxAsyncConnections) &&
        Objects.equals(this.minPartSize, dtoS3Storage.minPartSize) &&
        Objects.equals(this.path, dtoS3Storage.path) &&
        Objects.equals(this.s3EndpointOverride, dtoS3Storage.s3EndpointOverride) &&
        Objects.equals(this.s3LogLevel, dtoS3Storage.s3LogLevel) &&
        Objects.equals(this.s3Profile, dtoS3Storage.s3Profile) &&
        Objects.equals(this.s3Region, dtoS3Storage.s3Region) &&
        Objects.equals(this.secretAccessKey, dtoS3Storage.secretAccessKey) &&
        Objects.equals(this.secretAgent, dtoS3Storage.secretAgent) &&
        Objects.equals(this.secretAgentName, dtoS3Storage.secretAgentName) &&
        Objects.equals(this.storageClass, dtoS3Storage.storageClass);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKeyId, bucket, maxAsyncConnections, minPartSize, path, s3EndpointOverride, s3LogLevel, s3Profile, s3Region, secretAccessKey, secretAgent, secretAgentName, storageClass);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoS3Storage {\n");
    sb.append("    accessKeyId: ").append(toIndentedString(accessKeyId)).append("\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    maxAsyncConnections: ").append(toIndentedString(maxAsyncConnections)).append("\n");
    sb.append("    minPartSize: ").append(toIndentedString(minPartSize)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    s3EndpointOverride: ").append(toIndentedString(s3EndpointOverride)).append("\n");
    sb.append("    s3LogLevel: ").append(toIndentedString(s3LogLevel)).append("\n");
    sb.append("    s3Profile: ").append(toIndentedString(s3Profile)).append("\n");
    sb.append("    s3Region: ").append(toIndentedString(s3Region)).append("\n");
    sb.append("    secretAccessKey: ").append(toIndentedString(secretAccessKey)).append("\n");
    sb.append("    secretAgent: ").append(toIndentedString(secretAgent)).append("\n");
    sb.append("    secretAgentName: ").append(toIndentedString(secretAgentName)).append("\n");
    sb.append("    storageClass: ").append(toIndentedString(storageClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("access-key-id", "bucket", "max-async-connections", "min-part-size", "path", "s3-endpoint-override", "s3-log-level", "s3-profile", "s3-region", "secret-access-key", "secret-agent", "secret-agent-name", "storage-class"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("bucket", "s3-region"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoS3Storage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoS3Storage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoS3Storage is not found in the empty JSON string", DtoS3Storage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoS3Storage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoS3Storage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtoS3Storage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access-key-id") != null && !jsonObj.get("access-key-id").isJsonNull()) && !jsonObj.get("access-key-id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access-key-id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access-key-id").toString()));
      }
      if (!jsonObj.get("bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("s3-endpoint-override") != null && !jsonObj.get("s3-endpoint-override").isJsonNull()) && !jsonObj.get("s3-endpoint-override").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3-endpoint-override` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3-endpoint-override").toString()));
      }
      if ((jsonObj.get("s3-log-level") != null && !jsonObj.get("s3-log-level").isJsonNull()) && !jsonObj.get("s3-log-level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3-log-level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3-log-level").toString()));
      }
      // validate the optional field `s3-log-level`
      if (jsonObj.get("s3-log-level") != null && !jsonObj.get("s3-log-level").isJsonNull()) {
        S3LogLevelEnum.validateJsonElement(jsonObj.get("s3-log-level"));
      }
      if ((jsonObj.get("s3-profile") != null && !jsonObj.get("s3-profile").isJsonNull()) && !jsonObj.get("s3-profile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3-profile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3-profile").toString()));
      }
      if (!jsonObj.get("s3-region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3-region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3-region").toString()));
      }
      if ((jsonObj.get("secret-access-key") != null && !jsonObj.get("secret-access-key").isJsonNull()) && !jsonObj.get("secret-access-key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret-access-key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret-access-key").toString()));
      }
      // validate the optional field `secret-agent`
      if (jsonObj.get("secret-agent") != null && !jsonObj.get("secret-agent").isJsonNull()) {
        DtoSecretAgent.validateJsonElement(jsonObj.get("secret-agent"));
      }
      if ((jsonObj.get("secret-agent-name") != null && !jsonObj.get("secret-agent-name").isJsonNull()) && !jsonObj.get("secret-agent-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret-agent-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret-agent-name").toString()));
      }
      // validate the optional field `storage-class`
      if (jsonObj.get("storage-class") != null && !jsonObj.get("storage-class").isJsonNull()) {
        DtoS3StorageClass.validateJsonElement(jsonObj.get("storage-class"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoS3Storage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoS3Storage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoS3Storage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoS3Storage.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoS3Storage>() {
           @Override
           public void write(JsonWriter out, DtoS3Storage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoS3Storage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoS3Storage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoS3Storage
   * @throws IOException if the JSON string is invalid with respect to DtoS3Storage
   */
  public static DtoS3Storage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoS3Storage.class);
  }

  /**
   * Convert an instance of DtoS3Storage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

