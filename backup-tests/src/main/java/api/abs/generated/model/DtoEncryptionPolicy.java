/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * EncryptionPolicy contains backup encryption information.
 */
public class DtoEncryptionPolicy {
  public static final String SERIALIZED_NAME_KEY_ENV = "key-env";
  @SerializedName(SERIALIZED_NAME_KEY_ENV)
  @javax.annotation.Nullable
  private String keyEnv;

  public static final String SERIALIZED_NAME_KEY_FILE = "key-file";
  @SerializedName(SERIALIZED_NAME_KEY_FILE)
  @javax.annotation.Nullable
  private String keyFile;

  public static final String SERIALIZED_NAME_KEY_SECRET = "key-secret";
  @SerializedName(SERIALIZED_NAME_KEY_SECRET)
  @javax.annotation.Nullable
  private String keySecret;

  /**
   * The encryption mode to be used (NONE, AES128, AES256)
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    NONE("NONE"),
    
    AES128("AES128"),
    
    AES256("AES256");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nullable
  private ModeEnum mode = ModeEnum.NONE;

  public DtoEncryptionPolicy() {
  }

  public DtoEncryptionPolicy keyEnv(@javax.annotation.Nullable String keyEnv) {
    this.keyEnv = keyEnv;
    return this;
  }

  /**
   * The name of the environment variable containing the encryption key.
   * @return keyEnv
   */
  @javax.annotation.Nullable
  public String getKeyEnv() {
    return keyEnv;
  }

  public void setKeyEnv(@javax.annotation.Nullable String keyEnv) {
    this.keyEnv = keyEnv;
  }


  public DtoEncryptionPolicy keyFile(@javax.annotation.Nullable String keyFile) {
    this.keyFile = keyFile;
    return this;
  }

  /**
   * The path to the file containing the encryption key.
   * @return keyFile
   */
  @javax.annotation.Nullable
  public String getKeyFile() {
    return keyFile;
  }

  public void setKeyFile(@javax.annotation.Nullable String keyFile) {
    this.keyFile = keyFile;
  }


  public DtoEncryptionPolicy keySecret(@javax.annotation.Nullable String keySecret) {
    this.keySecret = keySecret;
    return this;
  }

  /**
   * The secret keyword in Aerospike Secret Agent containing the encryption key.
   * @return keySecret
   */
  @javax.annotation.Nullable
  public String getKeySecret() {
    return keySecret;
  }

  public void setKeySecret(@javax.annotation.Nullable String keySecret) {
    this.keySecret = keySecret;
  }


  public DtoEncryptionPolicy mode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * The encryption mode to be used (NONE, AES128, AES256)
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoEncryptionPolicy dtoEncryptionPolicy = (DtoEncryptionPolicy) o;
    return Objects.equals(this.keyEnv, dtoEncryptionPolicy.keyEnv) &&
        Objects.equals(this.keyFile, dtoEncryptionPolicy.keyFile) &&
        Objects.equals(this.keySecret, dtoEncryptionPolicy.keySecret) &&
        Objects.equals(this.mode, dtoEncryptionPolicy.mode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyEnv, keyFile, keySecret, mode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoEncryptionPolicy {\n");
    sb.append("    keyEnv: ").append(toIndentedString(keyEnv)).append("\n");
    sb.append("    keyFile: ").append(toIndentedString(keyFile)).append("\n");
    sb.append("    keySecret: ").append(toIndentedString(keySecret)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("key-env", "key-file", "key-secret", "mode"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoEncryptionPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoEncryptionPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoEncryptionPolicy is not found in the empty JSON string", DtoEncryptionPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoEncryptionPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoEncryptionPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("key-env") != null && !jsonObj.get("key-env").isJsonNull()) && !jsonObj.get("key-env").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-env` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-env").toString()));
      }
      if ((jsonObj.get("key-file") != null && !jsonObj.get("key-file").isJsonNull()) && !jsonObj.get("key-file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-file").toString()));
      }
      if ((jsonObj.get("key-secret") != null && !jsonObj.get("key-secret").isJsonNull()) && !jsonObj.get("key-secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-secret").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoEncryptionPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoEncryptionPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoEncryptionPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoEncryptionPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoEncryptionPolicy>() {
           @Override
           public void write(JsonWriter out, DtoEncryptionPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoEncryptionPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoEncryptionPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoEncryptionPolicy
   * @throws IOException if the JSON string is invalid with respect to DtoEncryptionPolicy
   */
  public static DtoEncryptionPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoEncryptionPolicy.class);
  }

  /**
   * Convert an instance of DtoEncryptionPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

