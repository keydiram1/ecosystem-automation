/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoAerospikeCluster;
import api.abs.generated.model.DtoRestorePolicy;
import api.abs.generated.model.DtoSecretAgent;
import api.abs.generated.model.DtoStorage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * RestoreRequest represents a restore operation request.
 */
public class DtoRestoreRequest {
  public static final String SERIALIZED_NAME_BACKUP_DATA_PATH = "backup-data-path";
  @SerializedName(SERIALIZED_NAME_BACKUP_DATA_PATH)
  @javax.annotation.Nonnull
  private String backupDataPath;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  @javax.annotation.Nullable
  private DtoAerospikeCluster destination;

  public static final String SERIALIZED_NAME_DESTINATION_NAME = "destination-name";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NAME)
  @javax.annotation.Nullable
  private String destinationName;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nullable
  private DtoRestorePolicy policy;

  public static final String SERIALIZED_NAME_SECRET_AGENT = "secret-agent";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT)
  @javax.annotation.Nullable
  private DtoSecretAgent secretAgent;

  public static final String SERIALIZED_NAME_SECRET_AGENT_NAME = "secret-agent-name";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENT_NAME)
  @javax.annotation.Nullable
  private String secretAgentName;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  @javax.annotation.Nullable
  private DtoStorage source;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "source-name";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  @javax.annotation.Nullable
  private String sourceName;

  public DtoRestoreRequest() {
  }

  public DtoRestoreRequest backupDataPath(@javax.annotation.Nonnull String backupDataPath) {
    this.backupDataPath = backupDataPath;
    return this;
  }

  /**
   * Path to the data from storage root. You can obtain this value by: - Browsing the storage UI, or - Reading the &#x60;key&#x60; field in the response from GET &#x60;v1/backups/full/{routine}&#x60;
   * @return backupDataPath
   */
  @javax.annotation.Nonnull
  public String getBackupDataPath() {
    return backupDataPath;
  }

  public void setBackupDataPath(@javax.annotation.Nonnull String backupDataPath) {
    this.backupDataPath = backupDataPath;
  }


  public DtoRestoreRequest destination(@javax.annotation.Nullable DtoAerospikeCluster destination) {
    this.destination = destination;
    return this;
  }

  /**
   * The details of the Aerospike destination cluster. Mutually exclusive with &#39;destination-name&#39;.
   * @return destination
   */
  @javax.annotation.Nullable
  public DtoAerospikeCluster getDestination() {
    return destination;
  }

  public void setDestination(@javax.annotation.Nullable DtoAerospikeCluster destination) {
    this.destination = destination;
  }


  public DtoRestoreRequest destinationName(@javax.annotation.Nullable String destinationName) {
    this.destinationName = destinationName;
    return this;
  }

  /**
   * Link to one of preconfigured clusters. Mutually exclusive with &#39;destination&#39;.
   * @return destinationName
   */
  @javax.annotation.Nullable
  public String getDestinationName() {
    return destinationName;
  }

  public void setDestinationName(@javax.annotation.Nullable String destinationName) {
    this.destinationName = destinationName;
  }


  public DtoRestoreRequest policy(@javax.annotation.Nullable DtoRestorePolicy policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Restore policy to use in the operation.
   * @return policy
   */
  @javax.annotation.Nullable
  public DtoRestorePolicy getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nullable DtoRestorePolicy policy) {
    this.policy = policy;
  }


  public DtoRestoreRequest secretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Mutually exclusive with &#39;secret-agent-name&#39;.
   * @return secretAgent
   */
  @javax.annotation.Nullable
  public DtoSecretAgent getSecretAgent() {
    return secretAgent;
  }

  public void setSecretAgent(@javax.annotation.Nullable DtoSecretAgent secretAgent) {
    this.secretAgent = secretAgent;
  }


  public DtoRestoreRequest secretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
    return this;
  }

  /**
   * Secret Agent configuration (optional). Link to one of preconfigured agents. Mutually exclusive with &#39;secret-agent&#39;.
   * @return secretAgentName
   */
  @javax.annotation.Nullable
  public String getSecretAgentName() {
    return secretAgentName;
  }

  public void setSecretAgentName(@javax.annotation.Nullable String secretAgentName) {
    this.secretAgentName = secretAgentName;
  }


  public DtoRestoreRequest source(@javax.annotation.Nullable DtoStorage source) {
    this.source = source;
    return this;
  }

  /**
   * The details of the storage configuration. Mutually exclusive with &#39;source-name&#39;.
   * @return source
   */
  @javax.annotation.Nullable
  public DtoStorage getSource() {
    return source;
  }

  public void setSource(@javax.annotation.Nullable DtoStorage source) {
    this.source = source;
  }


  public DtoRestoreRequest sourceName(@javax.annotation.Nullable String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * Link to one of preconfigured storages. Mutually exclusive with &#39;source&#39;.
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(@javax.annotation.Nullable String sourceName) {
    this.sourceName = sourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoRestoreRequest dtoRestoreRequest = (DtoRestoreRequest) o;
    return Objects.equals(this.backupDataPath, dtoRestoreRequest.backupDataPath) &&
        Objects.equals(this.destination, dtoRestoreRequest.destination) &&
        Objects.equals(this.destinationName, dtoRestoreRequest.destinationName) &&
        Objects.equals(this.policy, dtoRestoreRequest.policy) &&
        Objects.equals(this.secretAgent, dtoRestoreRequest.secretAgent) &&
        Objects.equals(this.secretAgentName, dtoRestoreRequest.secretAgentName) &&
        Objects.equals(this.source, dtoRestoreRequest.source) &&
        Objects.equals(this.sourceName, dtoRestoreRequest.sourceName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupDataPath, destination, destinationName, policy, secretAgent, secretAgentName, source, sourceName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoRestoreRequest {\n");
    sb.append("    backupDataPath: ").append(toIndentedString(backupDataPath)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    destinationName: ").append(toIndentedString(destinationName)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    secretAgent: ").append(toIndentedString(secretAgent)).append("\n");
    sb.append("    secretAgentName: ").append(toIndentedString(secretAgentName)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("backup-data-path", "destination", "destination-name", "policy", "secret-agent", "secret-agent-name", "source", "source-name"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("backup-data-path"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoRestoreRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoRestoreRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoRestoreRequest is not found in the empty JSON string", DtoRestoreRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoRestoreRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoRestoreRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DtoRestoreRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("backup-data-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backup-data-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backup-data-path").toString()));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        DtoAerospikeCluster.validateJsonElement(jsonObj.get("destination"));
      }
      if ((jsonObj.get("destination-name") != null && !jsonObj.get("destination-name").isJsonNull()) && !jsonObj.get("destination-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination-name").toString()));
      }
      // validate the optional field `policy`
      if (jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) {
        DtoRestorePolicy.validateJsonElement(jsonObj.get("policy"));
      }
      // validate the optional field `secret-agent`
      if (jsonObj.get("secret-agent") != null && !jsonObj.get("secret-agent").isJsonNull()) {
        DtoSecretAgent.validateJsonElement(jsonObj.get("secret-agent"));
      }
      if ((jsonObj.get("secret-agent-name") != null && !jsonObj.get("secret-agent-name").isJsonNull()) && !jsonObj.get("secret-agent-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret-agent-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret-agent-name").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        DtoStorage.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("source-name") != null && !jsonObj.get("source-name").isJsonNull()) && !jsonObj.get("source-name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source-name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source-name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoRestoreRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoRestoreRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoRestoreRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoRestoreRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoRestoreRequest>() {
           @Override
           public void write(JsonWriter out, DtoRestoreRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoRestoreRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoRestoreRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoRestoreRequest
   * @throws IOException if the JSON string is invalid with respect to DtoRestoreRequest
   */
  public static DtoRestoreRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoRestoreRequest.class);
  }

  /**
   * Convert an instance of DtoRestoreRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

