/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * TLS represents the Aerospike cluster TLS configuration options.
 */
public class DtoTLS {
  public static final String SERIALIZED_NAME_CA_FILE = "ca-file";
  @SerializedName(SERIALIZED_NAME_CA_FILE)
  @javax.annotation.Nullable
  private String caFile;

  public static final String SERIALIZED_NAME_CA_PATH = "ca-path";
  @SerializedName(SERIALIZED_NAME_CA_PATH)
  @javax.annotation.Nullable
  private String caPath;

  public static final String SERIALIZED_NAME_CERT_FILE = "cert-file";
  @SerializedName(SERIALIZED_NAME_CERT_FILE)
  @javax.annotation.Nullable
  private String certFile;

  public static final String SERIALIZED_NAME_CIPHER_SUITE = "cipher-suite";
  @SerializedName(SERIALIZED_NAME_CIPHER_SUITE)
  @javax.annotation.Nullable
  private String cipherSuite;

  public static final String SERIALIZED_NAME_KEY_FILE = "key-file";
  @SerializedName(SERIALIZED_NAME_KEY_FILE)
  @javax.annotation.Nullable
  private String keyFile;

  public static final String SERIALIZED_NAME_KEY_FILE_PASSWORD = "key-file-password";
  @SerializedName(SERIALIZED_NAME_KEY_FILE_PASSWORD)
  @javax.annotation.Nullable
  private String keyFilePassword;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOLS = "protocols";
  @SerializedName(SERIALIZED_NAME_PROTOCOLS)
  @javax.annotation.Nullable
  private String protocols = "TLSv1.2";

  public DtoTLS() {
  }

  public DtoTLS caFile(@javax.annotation.Nullable String caFile) {
    this.caFile = caFile;
    return this;
  }

  /**
   * Path to a trusted CA certificate file.
   * @return caFile
   */
  @javax.annotation.Nullable
  public String getCaFile() {
    return caFile;
  }

  public void setCaFile(@javax.annotation.Nullable String caFile) {
    this.caFile = caFile;
  }


  public DtoTLS caPath(@javax.annotation.Nullable String caPath) {
    this.caPath = caPath;
    return this;
  }

  /**
   * Path to a directory of trusted CA certificates.
   * @return caPath
   */
  @javax.annotation.Nullable
  public String getCaPath() {
    return caPath;
  }

  public void setCaPath(@javax.annotation.Nullable String caPath) {
    this.caPath = caPath;
  }


  public DtoTLS certFile(@javax.annotation.Nullable String certFile) {
    this.certFile = certFile;
    return this;
  }

  /**
   * Path to the chain file for mutual authentication (if Aerospike Cluster supports it).
   * @return certFile
   */
  @javax.annotation.Nullable
  public String getCertFile() {
    return certFile;
  }

  public void setCertFile(@javax.annotation.Nullable String certFile) {
    this.certFile = certFile;
  }


  public DtoTLS cipherSuite(@javax.annotation.Nullable String cipherSuite) {
    this.cipherSuite = cipherSuite;
    return this;
  }

  /**
   * TLS cipher selection criteria. The format is the same as OpenSSL&#39;s Cipher List Format.
   * @return cipherSuite
   */
  @javax.annotation.Nullable
  public String getCipherSuite() {
    return cipherSuite;
  }

  public void setCipherSuite(@javax.annotation.Nullable String cipherSuite) {
    this.cipherSuite = cipherSuite;
  }


  public DtoTLS keyFile(@javax.annotation.Nullable String keyFile) {
    this.keyFile = keyFile;
    return this;
  }

  /**
   * Path to the key for mutual authentication (if Aerospike cluster supports it).
   * @return keyFile
   */
  @javax.annotation.Nullable
  public String getKeyFile() {
    return keyFile;
  }

  public void setKeyFile(@javax.annotation.Nullable String keyFile) {
    this.keyFile = keyFile;
  }


  public DtoTLS keyFilePassword(@javax.annotation.Nullable String keyFilePassword) {
    this.keyFilePassword = keyFilePassword;
    return this;
  }

  /**
   * Password to load protected TLS-keyfile (env:VAR, file:PATH, PASSWORD).
   * @return keyFilePassword
   */
  @javax.annotation.Nullable
  public String getKeyFilePassword() {
    return keyFilePassword;
  }

  public void setKeyFilePassword(@javax.annotation.Nullable String keyFilePassword) {
    this.keyFilePassword = keyFilePassword;
  }


  public DtoTLS name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * The default TLS name used to authenticate each TLS socket connection.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public DtoTLS protocols(@javax.annotation.Nullable String protocols) {
    this.protocols = protocols;
    return this;
  }

  /**
   * TLS protocol selection criteria. This format is the same as Apache&#39;s SSL Protocol.
   * @return protocols
   */
  @javax.annotation.Nullable
  public String getProtocols() {
    return protocols;
  }

  public void setProtocols(@javax.annotation.Nullable String protocols) {
    this.protocols = protocols;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoTLS dtoTLS = (DtoTLS) o;
    return Objects.equals(this.caFile, dtoTLS.caFile) &&
        Objects.equals(this.caPath, dtoTLS.caPath) &&
        Objects.equals(this.certFile, dtoTLS.certFile) &&
        Objects.equals(this.cipherSuite, dtoTLS.cipherSuite) &&
        Objects.equals(this.keyFile, dtoTLS.keyFile) &&
        Objects.equals(this.keyFilePassword, dtoTLS.keyFilePassword) &&
        Objects.equals(this.name, dtoTLS.name) &&
        Objects.equals(this.protocols, dtoTLS.protocols);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(caFile, caPath, certFile, cipherSuite, keyFile, keyFilePassword, name, protocols);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoTLS {\n");
    sb.append("    caFile: ").append(toIndentedString(caFile)).append("\n");
    sb.append("    caPath: ").append(toIndentedString(caPath)).append("\n");
    sb.append("    certFile: ").append(toIndentedString(certFile)).append("\n");
    sb.append("    cipherSuite: ").append(toIndentedString(cipherSuite)).append("\n");
    sb.append("    keyFile: ").append(toIndentedString(keyFile)).append("\n");
    sb.append("    keyFilePassword: ").append(toIndentedString(keyFilePassword)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ca-file", "ca-path", "cert-file", "cipher-suite", "key-file", "key-file-password", "name", "protocols"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoTLS
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoTLS.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoTLS is not found in the empty JSON string", DtoTLS.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoTLS.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoTLS` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ca-file") != null && !jsonObj.get("ca-file").isJsonNull()) && !jsonObj.get("ca-file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca-file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ca-file").toString()));
      }
      if ((jsonObj.get("ca-path") != null && !jsonObj.get("ca-path").isJsonNull()) && !jsonObj.get("ca-path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ca-path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ca-path").toString()));
      }
      if ((jsonObj.get("cert-file") != null && !jsonObj.get("cert-file").isJsonNull()) && !jsonObj.get("cert-file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cert-file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cert-file").toString()));
      }
      if ((jsonObj.get("cipher-suite") != null && !jsonObj.get("cipher-suite").isJsonNull()) && !jsonObj.get("cipher-suite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipher-suite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cipher-suite").toString()));
      }
      if ((jsonObj.get("key-file") != null && !jsonObj.get("key-file").isJsonNull()) && !jsonObj.get("key-file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-file").toString()));
      }
      if ((jsonObj.get("key-file-password") != null && !jsonObj.get("key-file-password").isJsonNull()) && !jsonObj.get("key-file-password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key-file-password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key-file-password").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("protocols") != null && !jsonObj.get("protocols").isJsonNull()) && !jsonObj.get("protocols").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocols` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocols").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoTLS.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoTLS' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoTLS> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoTLS.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoTLS>() {
           @Override
           public void write(JsonWriter out, DtoTLS value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoTLS read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoTLS given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoTLS
   * @throws IOException if the JSON string is invalid with respect to DtoTLS
   */
  public static DtoTLS fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoTLS.class);
  }

  /**
   * Convert an instance of DtoTLS to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

