/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoStorage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * BackupDetails contains information about a backup.
 */
public class DtoBackupDetails {
  public static final String SERIALIZED_NAME_BYTE_COUNT = "byte-count";
  @SerializedName(SERIALIZED_NAME_BYTE_COUNT)
  @javax.annotation.Nullable
  private Long byteCount;

  public static final String SERIALIZED_NAME_COMPRESSION = "compression";
  @SerializedName(SERIALIZED_NAME_COMPRESSION)
  @javax.annotation.Nullable
  private String compression;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nullable
  private String created;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  @javax.annotation.Nullable
  private Integer duration;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  @javax.annotation.Nullable
  private String encryption;

  public static final String SERIALIZED_NAME_FILE_COUNT = "file-count";
  @SerializedName(SERIALIZED_NAME_FILE_COUNT)
  @javax.annotation.Nullable
  private Long fileCount;

  public static final String SERIALIZED_NAME_FINISHED = "finished";
  @SerializedName(SERIALIZED_NAME_FINISHED)
  @javax.annotation.Nullable
  private String finished;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private String from;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  @javax.annotation.Nullable
  private String namespace;

  public static final String SERIALIZED_NAME_RECORD_COUNT = "record-count";
  @SerializedName(SERIALIZED_NAME_RECORD_COUNT)
  @javax.annotation.Nullable
  private Long recordCount;

  public static final String SERIALIZED_NAME_SECONDARY_INDEX_COUNT = "secondary-index-count";
  @SerializedName(SERIALIZED_NAME_SECONDARY_INDEX_COUNT)
  @javax.annotation.Nullable
  private Long secondaryIndexCount;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  @javax.annotation.Nullable
  private DtoStorage storage;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nullable
  private Long timestamp;

  public static final String SERIALIZED_NAME_UDF_COUNT = "udf-count";
  @SerializedName(SERIALIZED_NAME_UDF_COUNT)
  @javax.annotation.Nullable
  private Long udfCount;

  public DtoBackupDetails() {
  }

  public DtoBackupDetails byteCount(@javax.annotation.Nullable Long byteCount) {
    this.byteCount = byteCount;
    return this;
  }

  /**
   * The size of the backup in bytes.
   * @return byteCount
   */
  @javax.annotation.Nullable
  public Long getByteCount() {
    return byteCount;
  }

  public void setByteCount(@javax.annotation.Nullable Long byteCount) {
    this.byteCount = byteCount;
  }


  public DtoBackupDetails compression(@javax.annotation.Nullable String compression) {
    this.compression = compression;
    return this;
  }

  /**
   * Compression specifies the compression mode used for the backup (ZSTD or NONE).
   * @return compression
   */
  @javax.annotation.Nullable
  public String getCompression() {
    return compression;
  }

  public void setCompression(@javax.annotation.Nullable String compression) {
    this.compression = compression;
  }


  public DtoBackupDetails created(@javax.annotation.Nullable String created) {
    this.created = created;
    return this;
  }

  /**
   * The backup time in the ISO 8601 format.
   * @return created
   */
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(@javax.annotation.Nullable String created) {
    this.created = created;
  }


  public DtoBackupDetails duration(@javax.annotation.Nullable Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * DurationSec represents the elapsed time taken by the backup process in seconds.
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(@javax.annotation.Nullable Integer duration) {
    this.duration = duration;
  }


  public DtoBackupDetails encryption(@javax.annotation.Nullable String encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Encryption specifies the encryption mode used for the backup (NONE, AES128, AES256).
   * @return encryption
   */
  @javax.annotation.Nullable
  public String getEncryption() {
    return encryption;
  }

  public void setEncryption(@javax.annotation.Nullable String encryption) {
    this.encryption = encryption;
  }


  public DtoBackupDetails fileCount(@javax.annotation.Nullable Long fileCount) {
    this.fileCount = fileCount;
    return this;
  }

  /**
   * The number of backup files created.
   * @return fileCount
   */
  @javax.annotation.Nullable
  public Long getFileCount() {
    return fileCount;
  }

  public void setFileCount(@javax.annotation.Nullable Long fileCount) {
    this.fileCount = fileCount;
  }


  public DtoBackupDetails finished(@javax.annotation.Nullable String finished) {
    this.finished = finished;
    return this;
  }

  /**
   * The time the backup operation completed.
   * @return finished
   */
  @javax.annotation.Nullable
  public String getFinished() {
    return finished;
  }

  public void setFinished(@javax.annotation.Nullable String finished) {
    this.finished = finished;
  }


  public DtoBackupDetails from(@javax.annotation.Nullable String from) {
    this.from = from;
    return this;
  }

  /**
   * The lower time bound of backup entities in the ISO 8601 format (for incremental backups only).
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable String from) {
    this.from = from;
  }


  public DtoBackupDetails key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * Key is the path to the backup files within the configured storage location. This value can be used as &#x60;backup-data-path&#x60; in dto.RestoreRequest.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public DtoBackupDetails namespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * The namespace of a backup.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(@javax.annotation.Nullable String namespace) {
    this.namespace = namespace;
  }


  public DtoBackupDetails recordCount(@javax.annotation.Nullable Long recordCount) {
    this.recordCount = recordCount;
    return this;
  }

  /**
   * The total number of records backed up.
   * @return recordCount
   */
  @javax.annotation.Nullable
  public Long getRecordCount() {
    return recordCount;
  }

  public void setRecordCount(@javax.annotation.Nullable Long recordCount) {
    this.recordCount = recordCount;
  }


  public DtoBackupDetails secondaryIndexCount(@javax.annotation.Nullable Long secondaryIndexCount) {
    this.secondaryIndexCount = secondaryIndexCount;
    return this;
  }

  /**
   * The number of secondary indexes backed up.
   * @return secondaryIndexCount
   */
  @javax.annotation.Nullable
  public Long getSecondaryIndexCount() {
    return secondaryIndexCount;
  }

  public void setSecondaryIndexCount(@javax.annotation.Nullable Long secondaryIndexCount) {
    this.secondaryIndexCount = secondaryIndexCount;
  }


  public DtoBackupDetails storage(@javax.annotation.Nullable DtoStorage storage) {
    this.storage = storage;
    return this;
  }

  /**
   * Storage specifies the details of the storage location where the backup is stored.
   * @return storage
   */
  @javax.annotation.Nullable
  public DtoStorage getStorage() {
    return storage;
  }

  public void setStorage(@javax.annotation.Nullable DtoStorage storage) {
    this.storage = storage;
  }


  public DtoBackupDetails timestamp(@javax.annotation.Nullable Long timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The backup time in epoch millis.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public Long getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nullable Long timestamp) {
    this.timestamp = timestamp;
  }


  public DtoBackupDetails udfCount(@javax.annotation.Nullable Long udfCount) {
    this.udfCount = udfCount;
    return this;
  }

  /**
   * The number of UDF files backed up.
   * @return udfCount
   */
  @javax.annotation.Nullable
  public Long getUdfCount() {
    return udfCount;
  }

  public void setUdfCount(@javax.annotation.Nullable Long udfCount) {
    this.udfCount = udfCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoBackupDetails dtoBackupDetails = (DtoBackupDetails) o;
    return Objects.equals(this.byteCount, dtoBackupDetails.byteCount) &&
        Objects.equals(this.compression, dtoBackupDetails.compression) &&
        Objects.equals(this.created, dtoBackupDetails.created) &&
        Objects.equals(this.duration, dtoBackupDetails.duration) &&
        Objects.equals(this.encryption, dtoBackupDetails.encryption) &&
        Objects.equals(this.fileCount, dtoBackupDetails.fileCount) &&
        Objects.equals(this.finished, dtoBackupDetails.finished) &&
        Objects.equals(this.from, dtoBackupDetails.from) &&
        Objects.equals(this.key, dtoBackupDetails.key) &&
        Objects.equals(this.namespace, dtoBackupDetails.namespace) &&
        Objects.equals(this.recordCount, dtoBackupDetails.recordCount) &&
        Objects.equals(this.secondaryIndexCount, dtoBackupDetails.secondaryIndexCount) &&
        Objects.equals(this.storage, dtoBackupDetails.storage) &&
        Objects.equals(this.timestamp, dtoBackupDetails.timestamp) &&
        Objects.equals(this.udfCount, dtoBackupDetails.udfCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(byteCount, compression, created, duration, encryption, fileCount, finished, from, key, namespace, recordCount, secondaryIndexCount, storage, timestamp, udfCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoBackupDetails {\n");
    sb.append("    byteCount: ").append(toIndentedString(byteCount)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    fileCount: ").append(toIndentedString(fileCount)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    recordCount: ").append(toIndentedString(recordCount)).append("\n");
    sb.append("    secondaryIndexCount: ").append(toIndentedString(secondaryIndexCount)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    udfCount: ").append(toIndentedString(udfCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("byte-count", "compression", "created", "duration", "encryption", "file-count", "finished", "from", "key", "namespace", "record-count", "secondary-index-count", "storage", "timestamp", "udf-count"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoBackupDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoBackupDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoBackupDetails is not found in the empty JSON string", DtoBackupDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoBackupDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoBackupDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("compression") != null && !jsonObj.get("compression").isJsonNull()) && !jsonObj.get("compression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compression").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if ((jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) && !jsonObj.get("encryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryption").toString()));
      }
      if ((jsonObj.get("finished") != null && !jsonObj.get("finished").isJsonNull()) && !jsonObj.get("finished").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `finished` to be a primitive type in the JSON string but got `%s`", jsonObj.get("finished").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      // validate the optional field `storage`
      if (jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) {
        DtoStorage.validateJsonElement(jsonObj.get("storage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoBackupDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoBackupDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoBackupDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoBackupDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoBackupDetails>() {
           @Override
           public void write(JsonWriter out, DtoBackupDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoBackupDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoBackupDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoBackupDetails
   * @throws IOException if the JSON string is invalid with respect to DtoBackupDetails
   */
  public static DtoBackupDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoBackupDetails.class);
  }

  /**
   * Convert an instance of DtoBackupDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

