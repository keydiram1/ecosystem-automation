/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoAzureStorage;
import api.abs.generated.model.DtoGcpStorage;
import api.abs.generated.model.DtoLocalStorage;
import api.abs.generated.model.DtoS3Storage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * Storage represents the configuration for a backup storage details.
 */
public class DtoStorage {
  public static final String SERIALIZED_NAME_AZURE_STORAGE = "azure-storage";
  @SerializedName(SERIALIZED_NAME_AZURE_STORAGE)
  @javax.annotation.Nullable
  private DtoAzureStorage azureStorage;

  public static final String SERIALIZED_NAME_GCP_STORAGE = "gcp-storage";
  @SerializedName(SERIALIZED_NAME_GCP_STORAGE)
  @javax.annotation.Nullable
  private DtoGcpStorage gcpStorage;

  public static final String SERIALIZED_NAME_LOCAL_STORAGE = "local-storage";
  @SerializedName(SERIALIZED_NAME_LOCAL_STORAGE)
  @javax.annotation.Nullable
  private DtoLocalStorage localStorage;

  public static final String SERIALIZED_NAME_S3_STORAGE = "s3-storage";
  @SerializedName(SERIALIZED_NAME_S3_STORAGE)
  @javax.annotation.Nullable
  private DtoS3Storage s3Storage;

  public DtoStorage() {
  }

  public DtoStorage azureStorage(@javax.annotation.Nullable DtoAzureStorage azureStorage) {
    this.azureStorage = azureStorage;
    return this;
  }

  /**
   * AzureStorage configuration, set if using Azure storage.
   * @return azureStorage
   */
  @javax.annotation.Nullable
  public DtoAzureStorage getAzureStorage() {
    return azureStorage;
  }

  public void setAzureStorage(@javax.annotation.Nullable DtoAzureStorage azureStorage) {
    this.azureStorage = azureStorage;
  }


  public DtoStorage gcpStorage(@javax.annotation.Nullable DtoGcpStorage gcpStorage) {
    this.gcpStorage = gcpStorage;
    return this;
  }

  /**
   * GcpStorage configuration, set if using GCP storage.
   * @return gcpStorage
   */
  @javax.annotation.Nullable
  public DtoGcpStorage getGcpStorage() {
    return gcpStorage;
  }

  public void setGcpStorage(@javax.annotation.Nullable DtoGcpStorage gcpStorage) {
    this.gcpStorage = gcpStorage;
  }


  public DtoStorage localStorage(@javax.annotation.Nullable DtoLocalStorage localStorage) {
    this.localStorage = localStorage;
    return this;
  }

  /**
   * LocalStorage configuration, set if using local storage.
   * @return localStorage
   */
  @javax.annotation.Nullable
  public DtoLocalStorage getLocalStorage() {
    return localStorage;
  }

  public void setLocalStorage(@javax.annotation.Nullable DtoLocalStorage localStorage) {
    this.localStorage = localStorage;
  }


  public DtoStorage s3Storage(@javax.annotation.Nullable DtoS3Storage s3Storage) {
    this.s3Storage = s3Storage;
    return this;
  }

  /**
   * S3Storage configuration, set if using S3 storage.
   * @return s3Storage
   */
  @javax.annotation.Nullable
  public DtoS3Storage getS3Storage() {
    return s3Storage;
  }

  public void setS3Storage(@javax.annotation.Nullable DtoS3Storage s3Storage) {
    this.s3Storage = s3Storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoStorage dtoStorage = (DtoStorage) o;
    return Objects.equals(this.azureStorage, dtoStorage.azureStorage) &&
        Objects.equals(this.gcpStorage, dtoStorage.gcpStorage) &&
        Objects.equals(this.localStorage, dtoStorage.localStorage) &&
        Objects.equals(this.s3Storage, dtoStorage.s3Storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureStorage, gcpStorage, localStorage, s3Storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoStorage {\n");
    sb.append("    azureStorage: ").append(toIndentedString(azureStorage)).append("\n");
    sb.append("    gcpStorage: ").append(toIndentedString(gcpStorage)).append("\n");
    sb.append("    localStorage: ").append(toIndentedString(localStorage)).append("\n");
    sb.append("    s3Storage: ").append(toIndentedString(s3Storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("azure-storage", "gcp-storage", "local-storage", "s3-storage"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoStorage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoStorage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoStorage is not found in the empty JSON string", DtoStorage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoStorage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoStorage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `azure-storage`
      if (jsonObj.get("azure-storage") != null && !jsonObj.get("azure-storage").isJsonNull()) {
        DtoAzureStorage.validateJsonElement(jsonObj.get("azure-storage"));
      }
      // validate the optional field `gcp-storage`
      if (jsonObj.get("gcp-storage") != null && !jsonObj.get("gcp-storage").isJsonNull()) {
        DtoGcpStorage.validateJsonElement(jsonObj.get("gcp-storage"));
      }
      // validate the optional field `local-storage`
      if (jsonObj.get("local-storage") != null && !jsonObj.get("local-storage").isJsonNull()) {
        DtoLocalStorage.validateJsonElement(jsonObj.get("local-storage"));
      }
      // validate the optional field `s3-storage`
      if (jsonObj.get("s3-storage") != null && !jsonObj.get("s3-storage").isJsonNull()) {
        DtoS3Storage.validateJsonElement(jsonObj.get("s3-storage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoStorage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoStorage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoStorage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoStorage.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoStorage>() {
           @Override
           public void write(JsonWriter out, DtoStorage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoStorage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoStorage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoStorage
   * @throws IOException if the JSON string is invalid with respect to DtoStorage
   */
  public static DtoStorage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoStorage.class);
  }

  /**
   * Convert an instance of DtoStorage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

