/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoFileLoggerConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * LoggerConfig represents the backup service logger configuration.
 */
public class DtoLoggerConfig {
  public static final String SERIALIZED_NAME_FILE_WRITER = "file-writer";
  @SerializedName(SERIALIZED_NAME_FILE_WRITER)
  @javax.annotation.Nullable
  private DtoFileLoggerConfig fileWriter;

  /**
   * Format is the logger format (PLAIN, JSON).
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    PLAIN("PLAIN"),
    
    JSON("JSON");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private FormatEnum format = FormatEnum.PLAIN;

  /**
   * Level is the logger level.
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    TRACE("TRACE"),
    
    DEBUG("DEBUG"),
    
    INFO("INFO"),
    
    WARN("WARN"),
    
    WARNING("WARNING"),
    
    ERROR("ERROR");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  @javax.annotation.Nullable
  private LevelEnum level = LevelEnum.DEBUG;

  public static final String SERIALIZED_NAME_STDOUT_WRITER = "stdout-writer";
  @SerializedName(SERIALIZED_NAME_STDOUT_WRITER)
  @javax.annotation.Nullable
  private Boolean stdoutWriter = true;

  public DtoLoggerConfig() {
  }

  public DtoLoggerConfig fileWriter(@javax.annotation.Nullable DtoFileLoggerConfig fileWriter) {
    this.fileWriter = fileWriter;
    return this;
  }

  /**
   * File writer logging configuration.
   * @return fileWriter
   */
  @javax.annotation.Nullable
  public DtoFileLoggerConfig getFileWriter() {
    return fileWriter;
  }

  public void setFileWriter(@javax.annotation.Nullable DtoFileLoggerConfig fileWriter) {
    this.fileWriter = fileWriter;
  }


  public DtoLoggerConfig format(@javax.annotation.Nullable FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Format is the logger format (PLAIN, JSON).
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable FormatEnum format) {
    this.format = format;
  }


  public DtoLoggerConfig level(@javax.annotation.Nullable LevelEnum level) {
    this.level = level;
    return this;
  }

  /**
   * Level is the logger level.
   * @return level
   */
  @javax.annotation.Nullable
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(@javax.annotation.Nullable LevelEnum level) {
    this.level = level;
  }


  public DtoLoggerConfig stdoutWriter(@javax.annotation.Nullable Boolean stdoutWriter) {
    this.stdoutWriter = stdoutWriter;
    return this;
  }

  /**
   * Whether to enable logging to the standard output.
   * @return stdoutWriter
   */
  @javax.annotation.Nullable
  public Boolean getStdoutWriter() {
    return stdoutWriter;
  }

  public void setStdoutWriter(@javax.annotation.Nullable Boolean stdoutWriter) {
    this.stdoutWriter = stdoutWriter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoLoggerConfig dtoLoggerConfig = (DtoLoggerConfig) o;
    return Objects.equals(this.fileWriter, dtoLoggerConfig.fileWriter) &&
        Objects.equals(this.format, dtoLoggerConfig.format) &&
        Objects.equals(this.level, dtoLoggerConfig.level) &&
        Objects.equals(this.stdoutWriter, dtoLoggerConfig.stdoutWriter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileWriter, format, level, stdoutWriter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoLoggerConfig {\n");
    sb.append("    fileWriter: ").append(toIndentedString(fileWriter)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    stdoutWriter: ").append(toIndentedString(stdoutWriter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("file-writer", "format", "level", "stdout-writer"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoLoggerConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoLoggerConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoLoggerConfig is not found in the empty JSON string", DtoLoggerConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoLoggerConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoLoggerConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `file-writer`
      if (jsonObj.get("file-writer") != null && !jsonObj.get("file-writer").isJsonNull()) {
        DtoFileLoggerConfig.validateJsonElement(jsonObj.get("file-writer"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the optional field `level`
      if (jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) {
        LevelEnum.validateJsonElement(jsonObj.get("level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoLoggerConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoLoggerConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoLoggerConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoLoggerConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoLoggerConfig>() {
           @Override
           public void write(JsonWriter out, DtoLoggerConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoLoggerConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoLoggerConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoLoggerConfig
   * @throws IOException if the JSON string is invalid with respect to DtoLoggerConfig
   */
  public static DtoLoggerConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoLoggerConfig.class);
  }

  /**
   * Convert an instance of DtoLoggerConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

