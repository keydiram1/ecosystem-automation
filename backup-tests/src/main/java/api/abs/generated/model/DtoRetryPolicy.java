/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * RetryPolicy defines the configuration for retry attempts in case of failures.
 */
public class DtoRetryPolicy {
  public static final String SERIALIZED_NAME_BASE_TIMEOUT = "base-timeout";
  @SerializedName(SERIALIZED_NAME_BASE_TIMEOUT)
  @javax.annotation.Nullable
  private Integer baseTimeout;

  public static final String SERIALIZED_NAME_MAX_RETRIES = "max-retries";
  @SerializedName(SERIALIZED_NAME_MAX_RETRIES)
  @javax.annotation.Nullable
  private Integer maxRetries;

  public static final String SERIALIZED_NAME_MULTIPLIER = "multiplier";
  @SerializedName(SERIALIZED_NAME_MULTIPLIER)
  @javax.annotation.Nullable
  private BigDecimal multiplier;

  public DtoRetryPolicy() {
  }

  public DtoRetryPolicy baseTimeout(@javax.annotation.Nullable Integer baseTimeout) {
    this.baseTimeout = baseTimeout;
    return this;
  }

  /**
   * BaseTimeout is the initial delay between retry attempts, in milliseconds.
   * @return baseTimeout
   */
  @javax.annotation.Nullable
  public Integer getBaseTimeout() {
    return baseTimeout;
  }

  public void setBaseTimeout(@javax.annotation.Nullable Integer baseTimeout) {
    this.baseTimeout = baseTimeout;
  }


  public DtoRetryPolicy maxRetries(@javax.annotation.Nullable Integer maxRetries) {
    this.maxRetries = maxRetries;
    return this;
  }

  /**
   * MaxRetries is the maximum number of retry attempts that will be made. If set to 0, no retries will be performed.
   * @return maxRetries
   */
  @javax.annotation.Nullable
  public Integer getMaxRetries() {
    return maxRetries;
  }

  public void setMaxRetries(@javax.annotation.Nullable Integer maxRetries) {
    this.maxRetries = maxRetries;
  }


  public DtoRetryPolicy multiplier(@javax.annotation.Nullable BigDecimal multiplier) {
    this.multiplier = multiplier;
    return this;
  }

  /**
   * Multiplier is used to increase the delay between subsequent retry attempts. The actual delay is calculated as: BaseTimeout * (Multiplier ^ attemptNumber)
   * @return multiplier
   */
  @javax.annotation.Nullable
  public BigDecimal getMultiplier() {
    return multiplier;
  }

  public void setMultiplier(@javax.annotation.Nullable BigDecimal multiplier) {
    this.multiplier = multiplier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoRetryPolicy dtoRetryPolicy = (DtoRetryPolicy) o;
    return Objects.equals(this.baseTimeout, dtoRetryPolicy.baseTimeout) &&
        Objects.equals(this.maxRetries, dtoRetryPolicy.maxRetries) &&
        Objects.equals(this.multiplier, dtoRetryPolicy.multiplier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseTimeout, maxRetries, multiplier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoRetryPolicy {\n");
    sb.append("    baseTimeout: ").append(toIndentedString(baseTimeout)).append("\n");
    sb.append("    maxRetries: ").append(toIndentedString(maxRetries)).append("\n");
    sb.append("    multiplier: ").append(toIndentedString(multiplier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("base-timeout", "max-retries", "multiplier"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoRetryPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoRetryPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoRetryPolicy is not found in the empty JSON string", DtoRetryPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoRetryPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoRetryPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoRetryPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoRetryPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoRetryPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoRetryPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoRetryPolicy>() {
           @Override
           public void write(JsonWriter out, DtoRetryPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoRetryPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoRetryPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoRetryPolicy
   * @throws IOException if the JSON string is invalid with respect to DtoRetryPolicy
   */
  public static DtoRetryPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoRetryPolicy.class);
  }

  /**
   * Convert an instance of DtoRetryPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

