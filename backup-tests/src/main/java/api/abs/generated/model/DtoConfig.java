/*
 * Backup Service REST API Specification
 * Aerospike Backup Service
 *
 * The version of the OpenAPI document: v3.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api.abs.generated.model;

import java.util.Objects;
import api.abs.generated.model.DtoAerospikeCluster;
import api.abs.generated.model.DtoBackupPolicy;
import api.abs.generated.model.DtoBackupRoutine;
import api.abs.generated.model.DtoBackupServiceConfig;
import api.abs.generated.model.DtoSecretAgent;
import api.abs.generated.model.DtoStorage;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import api.abs.generated.JSON;

/**
 * Config represents the service configuration file.
 */
public class DtoConfig {
  public static final String SERIALIZED_NAME_AEROSPIKE_CLUSTERS = "aerospike-clusters";
  @SerializedName(SERIALIZED_NAME_AEROSPIKE_CLUSTERS)
  @javax.annotation.Nullable
  private Map<String, DtoAerospikeCluster> aerospikeClusters = new HashMap<>();

  public static final String SERIALIZED_NAME_BACKUP_POLICIES = "backup-policies";
  @SerializedName(SERIALIZED_NAME_BACKUP_POLICIES)
  @javax.annotation.Nullable
  private Map<String, DtoBackupPolicy> backupPolicies = new HashMap<>();

  public static final String SERIALIZED_NAME_BACKUP_ROUTINES = "backup-routines";
  @SerializedName(SERIALIZED_NAME_BACKUP_ROUTINES)
  @javax.annotation.Nullable
  private Map<String, DtoBackupRoutine> backupRoutines = new HashMap<>();

  public static final String SERIALIZED_NAME_SECRET_AGENTS = "secret-agents";
  @SerializedName(SERIALIZED_NAME_SECRET_AGENTS)
  @javax.annotation.Nullable
  private Map<String, DtoSecretAgent> secretAgents = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  @javax.annotation.Nullable
  private DtoBackupServiceConfig service;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  @javax.annotation.Nullable
  private Map<String, DtoStorage> storage = new HashMap<>();

  public DtoConfig() {
  }

  public DtoConfig aerospikeClusters(@javax.annotation.Nullable Map<String, DtoAerospikeCluster> aerospikeClusters) {
    this.aerospikeClusters = aerospikeClusters;
    return this;
  }

  public DtoConfig putAerospikeClustersItem(String key, DtoAerospikeCluster aerospikeClustersItem) {
    if (this.aerospikeClusters == null) {
      this.aerospikeClusters = new HashMap<>();
    }
    this.aerospikeClusters.put(key, aerospikeClustersItem);
    return this;
  }

  /**
   * AerospikeClusters is a map of Aerospike clusters that can be used by backup routines.
   * @return aerospikeClusters
   */
  @javax.annotation.Nullable
  public Map<String, DtoAerospikeCluster> getAerospikeClusters() {
    return aerospikeClusters;
  }

  public void setAerospikeClusters(@javax.annotation.Nullable Map<String, DtoAerospikeCluster> aerospikeClusters) {
    this.aerospikeClusters = aerospikeClusters;
  }


  public DtoConfig backupPolicies(@javax.annotation.Nullable Map<String, DtoBackupPolicy> backupPolicies) {
    this.backupPolicies = backupPolicies;
    return this;
  }

  public DtoConfig putBackupPoliciesItem(String key, DtoBackupPolicy backupPoliciesItem) {
    if (this.backupPolicies == null) {
      this.backupPolicies = new HashMap<>();
    }
    this.backupPolicies.put(key, backupPoliciesItem);
    return this;
  }

  /**
   * BackupPolicies is a map of backup policies that can be used by backup routines.
   * @return backupPolicies
   */
  @javax.annotation.Nullable
  public Map<String, DtoBackupPolicy> getBackupPolicies() {
    return backupPolicies;
  }

  public void setBackupPolicies(@javax.annotation.Nullable Map<String, DtoBackupPolicy> backupPolicies) {
    this.backupPolicies = backupPolicies;
  }


  public DtoConfig backupRoutines(@javax.annotation.Nullable Map<String, DtoBackupRoutine> backupRoutines) {
    this.backupRoutines = backupRoutines;
    return this;
  }

  public DtoConfig putBackupRoutinesItem(String key, DtoBackupRoutine backupRoutinesItem) {
    if (this.backupRoutines == null) {
      this.backupRoutines = new HashMap<>();
    }
    this.backupRoutines.put(key, backupRoutinesItem);
    return this;
  }

  /**
   * BackupRoutines is a map of backup routines.
   * @return backupRoutines
   */
  @javax.annotation.Nullable
  public Map<String, DtoBackupRoutine> getBackupRoutines() {
    return backupRoutines;
  }

  public void setBackupRoutines(@javax.annotation.Nullable Map<String, DtoBackupRoutine> backupRoutines) {
    this.backupRoutines = backupRoutines;
  }


  public DtoConfig secretAgents(@javax.annotation.Nullable Map<String, DtoSecretAgent> secretAgents) {
    this.secretAgents = secretAgents;
    return this;
  }

  public DtoConfig putSecretAgentsItem(String key, DtoSecretAgent secretAgentsItem) {
    if (this.secretAgents == null) {
      this.secretAgents = new HashMap<>();
    }
    this.secretAgents.put(key, secretAgentsItem);
    return this;
  }

  /**
   * SecretAgents is a map of secret agents used by backup routines (for encryption keys), clusters (for credentials), and storage (for authentication).
   * @return secretAgents
   */
  @javax.annotation.Nullable
  public Map<String, DtoSecretAgent> getSecretAgents() {
    return secretAgents;
  }

  public void setSecretAgents(@javax.annotation.Nullable Map<String, DtoSecretAgent> secretAgents) {
    this.secretAgents = secretAgents;
  }


  public DtoConfig service(@javax.annotation.Nullable DtoBackupServiceConfig service) {
    this.service = service;
    return this;
  }

  /**
   * ServiceConfig contains general service settings.
   * @return service
   */
  @javax.annotation.Nullable
  public DtoBackupServiceConfig getService() {
    return service;
  }

  public void setService(@javax.annotation.Nullable DtoBackupServiceConfig service) {
    this.service = service;
  }


  public DtoConfig storage(@javax.annotation.Nullable Map<String, DtoStorage> storage) {
    this.storage = storage;
    return this;
  }

  public DtoConfig putStorageItem(String key, DtoStorage storageItem) {
    if (this.storage == null) {
      this.storage = new HashMap<>();
    }
    this.storage.put(key, storageItem);
    return this;
  }

  /**
   * Storage is a map of storages that can be used by backup routines.
   * @return storage
   */
  @javax.annotation.Nullable
  public Map<String, DtoStorage> getStorage() {
    return storage;
  }

  public void setStorage(@javax.annotation.Nullable Map<String, DtoStorage> storage) {
    this.storage = storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DtoConfig dtoConfig = (DtoConfig) o;
    return Objects.equals(this.aerospikeClusters, dtoConfig.aerospikeClusters) &&
        Objects.equals(this.backupPolicies, dtoConfig.backupPolicies) &&
        Objects.equals(this.backupRoutines, dtoConfig.backupRoutines) &&
        Objects.equals(this.secretAgents, dtoConfig.secretAgents) &&
        Objects.equals(this.service, dtoConfig.service) &&
        Objects.equals(this.storage, dtoConfig.storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aerospikeClusters, backupPolicies, backupRoutines, secretAgents, service, storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DtoConfig {\n");
    sb.append("    aerospikeClusters: ").append(toIndentedString(aerospikeClusters)).append("\n");
    sb.append("    backupPolicies: ").append(toIndentedString(backupPolicies)).append("\n");
    sb.append("    backupRoutines: ").append(toIndentedString(backupRoutines)).append("\n");
    sb.append("    secretAgents: ").append(toIndentedString(secretAgents)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("aerospike-clusters", "backup-policies", "backup-routines", "secret-agents", "service", "storage"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DtoConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DtoConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DtoConfig is not found in the empty JSON string", DtoConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DtoConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DtoConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `service`
      if (jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) {
        DtoBackupServiceConfig.validateJsonElement(jsonObj.get("service"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DtoConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DtoConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DtoConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DtoConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DtoConfig>() {
           @Override
           public void write(JsonWriter out, DtoConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DtoConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DtoConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DtoConfig
   * @throws IOException if the JSON string is invalid with respect to DtoConfig
   */
  public static DtoConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DtoConfig.class);
  }

  /**
   * Convert an instance of DtoConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

