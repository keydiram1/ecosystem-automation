- name: Create Image Builders
  hosts: localhost
  gather_facts: yes
  vars_files:
    - vars.yaml
  tasks:
    - name: Gather facts from localhost
      setup:
      delegate_to: localhost
      run_once: true
      register: localhost_facts
    - name: Look up for amd64 based image
      gcp_compute_image_info:
        auth_kind: "{{ gcp_auth_kind }}"
        project: "{{ gcp_project_id }}"
        filters:
          - name=builder-amd64
          - architecture=X86_64
      register: gcp_image_amd64
    - name: Print image details
      debug:
        msg: "{{ gcp_image_amd64 }}"
    - name: Set Amd64 image variable
      set_fact:
        image_amd64: "{{ gcp_image_amd64 }}"
      when: gcp_image_amd64 | length > 0
    - name: Look up for arm64 based image
      gcp_compute_image_info:
        auth_kind: "{{ gcp_auth_kind }}"
        project: "{{ gcp_project_id }}"
        filters:
          - name=builder-arm64
          - architecture=Arm64
      register: gcp_image_arm64
    - name: Print image details
      debug:
        msg: "{{ gcp_image_arm64 }}"
    - name: Set Arm64 image variable
      set_fact:
        image_arm64: "{{ gcp_image_arm64 }}"
      when: gcp_image_arm64 | length > 0
    - name: Create Amd64 Image
      command: packer build -var "project_id={{ gcp_project_id }}" -var "zone={{ gcp_zone }}" -var "machine_type={{ gcp_machine_type_amd64 }}" -var "image_name=builder-amd64" -var "source_image_family={{ gcp_source_image_family_amd64 }}" ../packer/worker.pkr.hcl
      register: async_result_amd64
      async: 3600
      poll: 0
      when: gcp_image_amd64.resources | length == 0
    - name: Create Arm64 Image
      command: packer build -var "project_id={{ gcp_project_id }}" -var "zone={{ gcp_zone }}" -var "machine_type={{ gcp_machine_type_arm64 }}" -var "image_name=builder-arm64" -var "source_image_family={{ gcp_source_image_family_arm64 }}" ../packer/worker.pkr.hcl
      register: async_result_arm64
      async: 3600
      poll: 0
      when: gcp_image_arm64.resources | length == 0
    - block:
        - name: Check the status of Amd64 based image creation
          async_status:
            jid: "{{ async_result_amd64.ansible_job_id }}"
          register: job_result_amd64
          until: job_result_amd64.finished
          retries: 360
          delay: 10
        - name: Print Amd64 image creation output
          debug:
            msg: "{{ job_result_amd64.stdout }}"
        - name: Look up for amd64 based image
          gcp_compute_image_info:
            auth_kind: "{{ gcp_auth_kind }}"
            project: "{{ gcp_project_id }}"
            filters:
              - name=builder-amd64
              - architecture=X86_64
          register: new_gcp_image_amd64
        - name: Set Amd64 image variable
          set_fact:
            image_arm64: "{{ new_gcp_image_amd64 }}"
          when: gcp_image_amd64 is not defined
      when: gcp_image_amd64.resources | length == 0

    - block:
        - name: Check the status of Arm64 based image creation
          async_status:
            jid: "{{ async_result_arm64.ansible_job_id }}"
          register: job_result_arm64
          until: job_result_arm64.finished
          retries: 360
          delay: 10
        - name: Print Arm64 image creation output
          debug:
            msg: "{{ job_result_arm64.stdout }}"
        - name: Look up for amd64 based image
          gcp_compute_image_info:
            auth_kind: "{{ gcp_auth_kind }}"
            project: "{{ gcp_project_id }}"
            filters:
              - name=builder-arm64
              - architecture=Arm64
          register: new_gcp_image_arm64
        - name: Set Arm64 image variable
          set_fact:
            image_amd64: "{{ new_gcp_image_arm64 }}"
          when: gcp_images_arm64 is not defined
      when: gcp_image_arm64.resources | length == 0
    - name: Generate OpenSSH keypair
      openssh_keypair:
        path: "{{ localhost_facts.ansible_facts.ansible_env.HOME }}/.ssh/id_rsa"
        state: present
        size: 2048
        mode: "600"
      register: ssh

    - name: Check for existing Amd64 VM
      gcp_compute_instance_info:
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_kind }}"
        zone: "{{ gcp_zone }}"
        filters:
          - name = "{{ gcp_vm_name_amd64 }}"
      register: instance_info_amd64
    - name: Create GCP VM Image Builder Amd64
      gcp_compute_instance:
        name: "{{ gcp_vm_name_amd64 }}"
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_kind }}"
        zone: "{{ gcp_zone }}"
        machine_type: "{{ gcp_machine_type_amd64 }}"
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              disk_size_gb: "{{ gcp_vm_size }}"
              source_image: "{{ image_amd64.resources[0].selfLink }}"
        network_interfaces:
          - access_configs:
              - name: External NAT
                type: ONE_TO_ONE_NAT
        labels:
          project: abs
          service: docker-image-builder
        metadata:
          ssh-keys: "{{ gcp_vm_user }}:{{ ssh.public_key }} {{ gcp_vm_user }}"
      async: 3600
      poll: 0
      register: async_instance_amd64
      when: instance_info_amd64.resources | length == 0

    - name: Check for existing Arm64 VM
      gcp_compute_instance_info:
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_kind }}"
        zone: "{{ gcp_zone }}"
        filters:
          - name = "{{ gcp_vm_name_arm64 }}"
      register: instance_info_arm64
    - name: Create GCP VM Image Builder Arm64
      gcp_compute_instance:
        name: "{{ gcp_vm_name_arm64 }}"
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_kind }}"
        zone: "{{ gcp_zone }}"
        machine_type: "{{ gcp_machine_type_arm64 }}"
        disks:
          - auto_delete: true
            boot: true
            initialize_params:
              disk_size_gb: "{{ gcp_vm_size }}"
              source_image: "{{ image_arm64.resources[0].selfLink }}"
        network_interfaces:
            - access_configs:
                - name: External NAT
                  type: ONE_TO_ONE_NAT
        labels:
          project: abs
          service: docker-image-builder
        metadata:
          ssh-keys: "{{ gcp_vm_user }}:{{ ssh.public_key }} {{ gcp_vm_user }}"
      async: 3600
      poll: 0
      register: async_instance_arm64
      when: instance_info_arm64.resources | length == 0
    - block:
      - name: Check the status of GCP VM amd64
        async_status:
          jid: "{{ async_instance_amd64.ansible_job_id }}"
        register: instance_amd64_job_result
        until: instance_amd64_job_result.finished
        retries: 360
        delay: 10
      - name: Wait for GCP VM Amd64 instance to be ready
        gcp_compute_instance_info:
          project: "{{ gcp_project_id }}"
          auth_kind: "{{ gcp_auth_kind }}"
          zone: "{{ gcp_zone }}"
          filters:
            - name = "{{ gcp_vm_name_amd64 }}"
        register: instance_info_amd64
        until: instance_info_amd64.resources[0].status == "RUNNING"
        retries: 360
        delay: 10
      when: instance_info_amd64.resources | length == 0
    - block:
        - name: Check the status of GCP VM arm64
          async_status:
            jid: "{{ async_instance_arm64.ansible_job_id }}"
          register: instance_arm64_job_result
          until: instance_arm64_job_result.finished
          retries: 360
          delay: 10
        - name: Wait for GCP VM ARM64 instance to be ready
          gcp_compute_instance_info:
            project: "{{ gcp_project_id }}"
            auth_kind: "{{ gcp_auth_kind }}"
            zone: "{{ gcp_zone }}"
            filters:
              - name = "{{ gcp_vm_name_arm64 }}"
          register: instance_info_arm64
          until: instance_info_arm64.resources[0].status == "RUNNING"
          retries: 360
          delay: 10
      when: instance_info_arm64.resources | length == 0
    - name: Refresh inventory to ensure it is up-to-date
      meta: refresh_inventory

- name: Wait for SSH connection
  hosts: all
  vars_files:
    - vars.yaml
  become: no
  gather_facts: no
  remote_user: "{{ gcp_vm_user }}"
  tasks:
    - name: Wait for connection
      wait_for_connection:
        delay: 10
        sleep: 1

- name: Config GCP instances
  hosts: all
  gather_facts: yes
  vars_files:
    - vars.yaml
  become: no
  remote_user: "{{ gcp_vm_user }}"
  tasks:
    - name: Gather facts from localhost
      setup:
      delegate_to: localhost
      run_once: true
      register: localhost_facts
    - name: Ensure SSH key pair is present
      openssh_keypair:
        path: "{{ localhost_facts.ansible_facts.ansible_env.HOME }}/.ssh/id_rsa"
        state: present
        mode: "600"
      register: ssh_key
      delegate_to: localhost
      run_once: true
    - name: Wait for SSH connection
      wait_for_connection:
        delay: 5
    - name: Copy SSH public key to remote server
      authorized_key:
        user: "{{ gcp_vm_user }}"
        state: present
        key: "{{ lookup('file', '{{ localhost_facts.ansible_facts.ansible_env.HOME }}/.ssh/id_rsa.pub') }}"
    - name: Enable PermitUserEnvironment in sshd_config
      become: yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PermitUserEnvironment\s+no'
        line: 'PermitUserEnvironment yes'
        state: present
      notify: restart sshd
    - name: Ensure /home/{{ gcp_vm_user }}/.ssh exists
      become: yes
      file:
        path: /home/{{ gcp_vm_user }}/.ssh
        state: directory
        mode: '0700'
        owner: "{{ gcp_vm_user }}"
        group: "{{ gcp_vm_user }}"
    - name: Ensure environment file exists
      become: yes
      file:
        path: /home/{{ gcp_vm_user }}/.ssh/environment
        state: touch
        mode: '0600'
        owner: "{{ gcp_vm_user }}"
        group: "{{ gcp_vm_user }}"
    - name: Set PATH in environment file if not present
      become: yes
      lineinfile:
        path: /home/{{ gcp_vm_user }}/.ssh/environment
        line: 'PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin'
        create: no
        state: present
  handlers:
    - name: restart sshd
      become: yes
      service:
        name: sshd
        state: restarted
      ignore_errors: True

- name: Configure docker buildx builders
  hosts: localhost
  gather_facts: yes
  vars_files:
    - vars.yaml
  tasks:
    - name: Get Amd64 GCP instance
      gcp_compute_instance_info:
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_kind }}"
        zone: "{{ gcp_zone }}"
        filters:
          - name = "{{ gcp_vm_name_amd64 }}"
      register: instance_info_amd64

    - name: Get Arm64 GCP instance
      gcp_compute_instance_info:
        project: "{{ gcp_project_id }}"
        auth_kind: "{{ gcp_auth_kind }}"
        zone: "{{ gcp_zone }}"
        filters:
          - name = "{{ gcp_vm_name_arm64 }}"
      register: instance_info_arm64

    - name: Add Amd64 VM instance to known hosts
      known_hosts:
        name: "{{ instance_info_amd64.resources[0].networkInterfaces[0].accessConfigs[0].natIP }}"
        key: "{{ lookup('pipe', 'ssh-keyscan {{ instance_info_amd64.resources[0].networkInterfaces[0].accessConfigs[0].natIP }}') }}"
        hash_host: true

    - name: Add Arm64 VM instance to known hosts
      known_hosts:
        name: "{{ instance_info_arm64.resources[0].networkInterfaces[0].accessConfigs[0].natIP }}"
        key: "{{ lookup('pipe', 'ssh-keyscan {{ instance_info_arm64.resources[0].networkInterfaces[0].accessConfigs[0].natIP }}') }}"
        hash_host: true

    - name: Create buildx builder for Amd64
      command: docker buildx create --driver docker-container --name "{{ docker_builder_name }}" --node "{{ builder_amd64.name }}" --platform "{{ builder_amd64.platform }}" --config builder-config.toml ssh://"{{ gcp_vm_user }}"@"{{ instance_info_amd64.resources[0].networkInterfaces[0].accessConfigs[0].natIP }}"

    - name: Create buildx builder for Arm64
      command: docker buildx create --driver docker-container --name "{{ docker_builder_name }}" --append --node "{{ builder_arm64.name }}" --platform "{{ builder_arm64.platform }}" --config builder-config.toml ssh://"{{ gcp_vm_user }}"@"{{ instance_info_arm64.resources[0].networkInterfaces[0].accessConfigs[0].natIP }}"

    - name: Use buildx builder
      command: docker buildx use "{{ docker_builder_name }}"
