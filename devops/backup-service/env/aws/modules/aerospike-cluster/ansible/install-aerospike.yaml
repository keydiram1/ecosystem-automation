- name: Wait for SSH connection
  hosts: nodes
  gather_facts: false
  become: yes
  remote_user: "{{ os_config['remote_user'] }}"
  vars_files:
    - vars/aws-config.yaml
    - vars/aero-cluster.yaml
    - vars/constants.yaml
    - vars/os-level-config.yaml
  tasks:
    - name: Import configuration properties
      include_vars:
        dir: vars
        ignore_files: .terragrunt-source-manifest
    - name: Wait for connection
      wait_for_connection:
        delay: 10
        sleep: 1

- name: Install Aerospike
  hosts: nodes
  gather_facts: true
  become: yes
  remote_user: "{{ os_config['remote_user'] }}"
  vars_files:
    - vars/aws-config.yaml
    - vars/aero-cluster.yaml
    - vars/constants.yaml
    - vars/os-level-config.yaml
  tasks:
    - name: Import configuration properties
      include_vars:
        dir: vars
        ignore_files: .terragrunt-source-manifest

    - name: Get service facts
      service_facts:

    - block:
        - name: Installation previously completed message
          debug:
            msg: "Aerospike is already installed - not re-installing"
        - meta: end_host
      when: hostvars[inventory_hostname].services[aerospike_service_name] is defined

    - block:
        - debug:
            msg: "Aerospike service is not installed - executing install steps"

        - block:
            - name: If Ubuntu, update package cache
              shell: |
                sudo apt update
          when: operating_system == ubuntu_os

        - block:
            - name: "stat {{ feature_key_path }}"
              local_action: "stat path={{ feature_key_path }}"
              become: no
              register: feature_key_meta

            - name: "Check feature key {{ feature_key_path }} exists"
              fail:
                msg: "Specified feature key {{ feature_key_path }} not found"
              when: not feature_key_meta.stat.exists
          when: enterprise

        - name: Check whether download exists
          stat:
            path: "{{ download_path }}"
          register: stat_download_path

        - name: Download Aerospike {{ 'Enterprise' if enterprise else 'Community' }}, version = {{ aerospike_version }}, distribution = {{ aerospike_distribution }} if not already downloaded
          get_url:
            url: "{{ download_url }}"
            dest: "{{ download_path }}"
          when: not stat_download_path.stat.exists

        - name: Unpack installer
          unarchive:
            remote_src: "yes"
            src: "{{ download_path }}"
            dest: "{{ download_file_dir }}"
            list_files: true
          register: result

        - name: Get install directory
          set_fact:
            install_directory: "{{ result.files[0] }}"

        - name: "Install Aerospike with strong consistency = {{ strong_consistency }}, tls = {{ tls_enabled }}, encryption at rest = {{ encryption_at_rest }}"
          command:
            chdir: "{{ download_file_dir }}/{{ install_directory }}"
            cmd: "{{ download_file_dir }}/{{ install_directory }}/asinstall"

        - name: "Create {{ partition_script_name }} script"
          template:
            src: "assets/{{ partition_script_name }}.j2"
            dest: "/tmp/{{ partition_script_name }}"
            mode: 0755

        - name: "Partition nvme drives"
          shell: "/tmp/{{ partition_script_name }}"

        - name: "Create {{ mount_drive_script_name }} script"
          template:
            src: "assets/{{ mount_drive_script_name }}.j2"
            dest: "/tmp/{{ mount_drive_script_name }}"
            mode: 0755
          when: mount_drive_as_fs

        - name: "Mount nvme drive as filesystem"
          shell: "/tmp/{{ mount_drive_script_name }}"
          when: mount_drive_as_fs

        - name: aerospike.conf
          import_tasks: modules/aerospike-configuration-tasks.yml

        - block:
            - name: Feature key
              copy:
                src: "{{ feature_key_path }}"
                dest: /etc/aerospike/features.conf
                owner: root
                group: root
                mode: '0644'
          when: enterprise

        - import_tasks: modules/prometheus-exporter-install.yml
          when: monitoring_enabled

        # asadm requires python3 & roster set below requires asadm - so need to do install here
        - name: Install python3
          package:
            name:
              - python3
            state: latest
          become: yes
        - name: Create TLS Certificate directory
          file:
            path: "{{ certificates_directory }}"
            state: directory
            mode: '0755'
            owner: "root"
            group: "root"
        - name: Copy certificate
          copy:
            dest: "{{ certificates_directory }}/rootCA.pem"
            content: "{{ lookup('aws_secret', 'testenv.rootCA_pem', nested=true) | b64decode }}"
            mode: '0644'
            owner: "root"
            group: "root"
        - name: Start Aerospike service
          service:
            name: aerospike
            state: started
          register: service_result
          until: service_result.status.ActiveState == "active"
          retries: 5
          delay: 60
        - block:
            - name: Copy roster set script
              template:
                src: "assets/strong-consistency/roster-set.sh.j2"
                dest: "/tmp/roster-set.sh"
                mode: "0755"

            - name: "Set roster"
              shell: "/tmp/roster-set.sh"

          when: strong_consistency

        - name: Installation complete message
          debug:
            msg: "Aerospike install complete"
      when: ( hostvars[inventory_hostname].services[aerospike_service_name] is not defined ) or not(hostvars[inventory_hostname].services[aerospike_service_name].state == 'running')

    # May not be available as standard - this is the case on GCP
    - name: Install sysstat
      package:
        name:
          - sysstat
        state: latest
      become: yes
