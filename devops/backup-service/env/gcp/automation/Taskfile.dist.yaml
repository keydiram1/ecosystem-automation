version: '3'
env:
  PROJECT_ID: "ecosystem-connectors-data"
  ZONE: "me-west1-a"
includes:
  jenkins:
    taskfile: ./jenkins/Taskfile.dist.yaml
    dir: ./jenkins
tasks:
  plan:
    cmds:
      - terragrunt run-all plan
  apply:
    cmds:
      - terragrunt run-all apply --terragrunt-non-interactive
  destroy:
    cmds:
      - terragrunt run-all destroy --terragrunt-non-interactive
  clean:
    cmds:
      - find . \( -type d -name ".terragrunt-cache" -o -name ".terraform" \) -prune -exec rm -rf {} +
      - find . -type f -name ".terraform.lock.hcl" -exec rm -f {} +
      - find . -maxdepth 1 -type f \( -name "*.pem" -o -name "*.jks" \) -exec rm -f {} +
      - find . -type f -exec sh -c 'head -n 1 "{}" | grep -q "^# Generated by Terragrunt" && rm -f "{}"' \;
  set:workspace:
    cmds:
      - yq eval '.workspace = "{{.CLI_ARGS}}"' common_vars.yaml -
  create-vm-storage:
    cmds:
      - gcloud compute disks create "ecoeng-data" --project="ecosystem-connectors-data" --zone="me-west1-a" --size="200GB" --type="pd-standard"
  delete-vm-storage:
    cmds:
      - gcloud compute disks delete "ecoeng-data" --project="ecosystem-connectors-data" --zone="me-west1-a"
  connect-to-ecoeng-server:
    cmds:
      - ./scripts/connect-vm.sh
  restart-docker-compose:
    cmds:
      - ./scripts/docker-compose.sh
  upload:jcasc:
    vars:
      JCASC_PATH:
        sh: find "$(git rev-parse --show-toplevel)" -type d -name ".terragrunt-cache" -prune -o -type f -name "jcasc.yaml" -print
      INSTANCE_NAME:
        sh: gcloud compute instances list --filter="name~'^ecosys'" --project="$PROJECT_ID" --format="get(name)" --limit 1
    cmds:
      - gcloud compute scp {{ .JCASC_PATH }} ubuntu@{{ .INSTANCE_NAME }}:jcasc.yaml --project="$PROJECT_ID" --zone="$ZONE"
