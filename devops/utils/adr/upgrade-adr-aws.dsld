def adrScriptPath = "/devops/run_tests/adr/AdrScript.groovy"
def adrScript

pipeline {
    agent {
        label "${params.jenkins_slave}"
    }

    parameters {
        booleanParam(name: 'uninstall_adr', defaultValue: false)
        booleanParam(name: 'install_adr', defaultValue: false)

        choice(name: 'aws_env_workspace', description: 'The AWS environment workspace the tests should run on', choices: ['test', 'david'])
        choice(name: 'jfrog_repository_stage', description: 'Set the repository stage you want to pull from', choices: ['dev', 'stage', 'prod'])
        string(name: 'adr_version', defaultValue: 'latest', description: 'Replace the tag of the Jfrog-ADR images')
        string(name: 'enterprise_backup_branch', defaultValue: 'main', description: 'The enterprise-backup branch you want the installation to run from')
        choice(name: 'jenkins_slave', description: 'The slave that the job will run on', choices: ['testAWS1', 'testAWS2'])
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '30'))
    }

    stages {
        stage('Uninstall ADR IN AWS Environment') {
            when {
                expression { return params.uninstall_adr }
            }
            steps {
                script {
                    adrScript = load pwd() + adrScriptPath
                    adrScript.cloneEnterpriseBackupForAws()
                    dir("/opt/automation/awsInstall/enterprise-backup/scripts") {
                        sh "./init-env.sh ${aws_env_workspace}"
                    }
                    dir("/opt/automation/awsInstall/enterprise-backup/iac/aws/staging-env-deployment") {
                        sh 'terraform destroy -target=helm_release.ingress-nginx -auto-approve'
                    }
                }
            }
        }

        stage('Install ADR IN AWS Environment') {
            when {
                expression { return params.install_adr }
            }
            steps {
                script {
                    adrScript = load pwd() + adrScriptPath
                    adrScript.cloneEnterpriseBackupForAws()
                    dir("/opt/automation/awsInstall/enterprise-backup/scripts") {
                        sh "./init-env.sh ${aws_env_workspace}"
                    }
                    dir("/opt/automation/awsInstall") {
                        sh "sed -i 's/tag: \"latest\".*/tag: ${adr_version}/g' ./enterprise-backup/iac/aws/staging-env-deployment/values/adr-values.yaml"
                        sh "sed -i 's/ecosystem-container-dev-local/ecosystem-container-${jfrog_repository_stage}-local/g' ./enterprise-backup/iac/aws/staging-env-deployment/values/adr-values.yaml"
                    }
                    dir("/opt/automation/awsInstall/enterprise-backup/iac/aws/staging-env-deployment") {
                        sh 'terraform apply -auto-approve'
                    }
                }
            }
        }
    }
}
