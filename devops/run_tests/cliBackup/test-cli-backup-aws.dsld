def cliBackupScriptPath = "/devops/run_tests/cliBackup/AsbackupScript.groovy"
def absScript

pipeline{

    agent {
        label "${params.jenkins_slave}"
    }
    parameters{
        booleanParam(name: 'install_aws_env', defaultValue: false)
        booleanParam(name: 'reinstall_asbackup', defaultValue: true)
        booleanParam(name: 'run_tests', defaultValue: true)
        booleanParam(name: 'uninstall_aws_env', defaultValue: false)

        string(name: 'asbackup_branch', defaultValue: 'main', description: 'The asbackup branch you want to install from')
        choice(name: 'jvm_suspend', description: 'JVM Suspend For Remote Debug', choices: ['n', 'y'])
        choice(name: 'parallel_classes', description: 'How many test classes to run in parallel', choices: ['30', '1', '2', '3'])
        choice(name: 'asdb_version', description: 'Set the version of the Aerospike images', choices: ['7.1.0.2', '7.0.0.3', '6.1.0.28', '6.4.0.6'])
        choice(name: 'jenkins_slave', description: 'The slave that the job will run on', choices: ['AllSlaves', 'Slave1', 'AllSlaves', 'Slave2', 'Slave3'])
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '30'))
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }

    stages {
        stage('Install AWS Environment') {
            when {
                expression { return params.install_aws_env }
            }
            steps {
                script {
                    absScript = load pwd() + cliBackupScriptPath
                    absScript.installAws()
                }
            }
        }
        stage('Uninstall asbackup') {
            when {
                expression { return params.reinstall_asbackup }
            }
            steps {
                script {
                    absScript = load pwd() + cliBackupScriptPath
                    absScript.uninstall()
                }
            }
        }
        stage('Install asbackup') {
            when {
                expression { return params.run_tests }
            }
            steps {
                script {
                    absScript.install()
                }
            }
        }

        stage('Run Backup tests') {
            when {
                expression { return params.reinstall_asbackup }
            }
            steps {
                script{
                    absScript = load pwd() + cliBackupScriptPath
                    absScript.runMvnIntegrationTestAWS("CLI-BACKUP-AWS")
                }
            }
        }

        stage('Uninstall AWS Environment') {
            when {
                expression { return params.uninstall_aws_env }
            }
            steps {
                script {
                    absScript = load pwd() + cliBackupScriptPath
                    absScript.uninstallAws()
                }
            }
        }
    }
}
