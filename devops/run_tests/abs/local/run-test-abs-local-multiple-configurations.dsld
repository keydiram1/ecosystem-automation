def absBranch = [string(name: 'abs_branch', value: params.'abs_branch')]
def installationSource = [string(name: 'abs_version', value: params.'abs_version'),
                          booleanParam(name: 'pull_from_jfrog', value: params.'pull_from_jfrog')]
def storageLocalBackupParallel1RestoreParallel1 = [string(name: 'config_storage', value: 'local'),
                                                   string(name: 'config_backup_parallel', value: '1'), string(name: 'config_restore_parallel', value: '1')]
def storageMinioBackupParallel8RestoreParallel8 = [string(name: 'config_storage', value: 'minio'),
                                                   string(name: 'config_backup_parallel', value: '8'), string(name: 'config_restore_parallel', value: '8')]
def storageMinioBackupParallel1RestoreParallel1 = [string(name: 'config_storage', value: 'minio'),
                                                   string(name: 'config_backup_parallel', value: '1'), string(name: 'config_restore_parallel', value: '1')]
def storageLocalBackupParallel8RestoreParallel8 = [string(name: 'config_storage', value: 'local'),
                                                   string(name: 'config_backup_parallel', value: '8'), string(name: 'config_restore_parallel', value: '8')]

pipeline {
    agent none

    parameters {
        booleanParam(name: 'storageLocal_parallel1', defaultValue: true)
        booleanParam(name: 'storageMinio_parallel8', defaultValue: true)
        booleanParam(name: 'storageLocal_parallel8', defaultValue: true)
        booleanParam(name: 'storageMinio_parallel1', defaultValue: true)

        string(name: 'automation_branch', defaultValue: 'master', description: 'The Automation branch with the tests you want to run')
        string(name: 'abs_branch', defaultValue: 'v3', description: 'The ABS branch you want to install from')

        booleanParam(name: 'pull_from_jfrog', defaultValue: false)
        string(name: 'abs_version', defaultValue: 'tests', description: 'Replace the tag of the Jfrog-ABS images')
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }

    stages {
        stage('Run ABS tests') {
            parallel {
                stage('Run test-abs-local with storage=local and parallel=1') {
                    when {
                        expression { return params.storageLocal_parallel1 }
                    }
                    steps {
                        build job: "test-abs-local", wait: false, propagate: false
                        sleep 20
                        build job: "test-abs-local/${automation_branch}", parameters: absBranch + installationSource + storageLocalBackupParallel1RestoreParallel1, propagate: false
                    }
                }
                stage('Run test-abs-local with storage=minio and parallel=8') {
                    when {
                        expression { return params.storageMinio_parallel8 }
                    }
                    steps {
                        build job: "test-abs-local", wait: false, propagate: false
                        sleep 20
                        build job: "test-abs-local/${automation_branch}", parameters: absBranch + installationSource + storageMinioBackupParallel8RestoreParallel8, propagate: false
                    }
                }
                stage('Run test-abs-local with storage=minio and parallel=1') {
                    when {
                        expression { return params.storageMinio_parallel1 }
                    }
                    steps {
                        build job: "test-abs-local", wait: false, propagate: false
                        sleep 20
                        build job: "test-abs-local/${automation_branch}", parameters: absBranch + installationSource + storageMinioBackupParallel1RestoreParallel1, propagate: false
                    }
                }
                stage('Run test-abs-local with storage=local and parallel=8') {
                    when {
                        expression { return params.storageLocal_parallel8 }
                    }
                    steps {
                        build job: "test-abs-local", wait: false, propagate: false
                        sleep 20
                        build job: "test-abs-local/${automation_branch}", parameters: absBranch + installationSource + storageLocalBackupParallel8RestoreParallel8, propagate: false
                    }
                }
            }
        }
    }
}