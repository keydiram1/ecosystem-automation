def absBranch = [string(name: 'abs_branch', value: params.'abs_branch')]
def aersopikeClusterV6 = [string(name: 'asdb_version', value: '6.1.0.28')]
def installationSource = [string(name: 'abs_version', value: params.'abs_version'),
                           booleanParam(name: 'pull_from_jfrog', value: params.'pull_from_jfrog')]
def gcp = [string(name: 'storage_provider', value: 'GCP')]
def azure = [string(name: 'storage_provider', value: 'AZURE')]

pipeline {
    agent none

    parameters {
        booleanParam(name: 'run_test_abs_local_v8', defaultValue: true)
        booleanParam(name: 'run_test_abs_negative_local', defaultValue: true)
        booleanParam(name: 'run_test_abs_sequential_local', defaultValue: true)
        booleanParam(name: 'run_test_abs_sequential_local_2', defaultValue: true)
        booleanParam(name: 'run_test_abs_configuraions_local', defaultValue: true)
        booleanParam(name: 'run_test_abs_service_local', defaultValue: true)
        booleanParam(name: 'run_test_abs_local_v6', defaultValue: true)
        booleanParam(name: 'run_test_abs_c_to_go_local', defaultValue: true)
        booleanParam(name: 'run_test_abs_sequential_local_gcp', defaultValue: false)
        booleanParam(name: 'run_test_abs_sequential_local_azure', defaultValue: false)

        string(name: 'automation_branch', defaultValue: 'master', description: 'The Automation branch with the tests you want to run')
        string(name: 'abs_branch', defaultValue: 'v3', description: 'The ABS branch you want to install from')

        booleanParam(name: 'pull_from_jfrog', defaultValue: false)
        string(name: 'abs_version', defaultValue: 'tests', description: 'Replace the tag of the Jfrog-ABS images')
    }

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }

    stages {
        stage('Run ABS tests') {
            parallel {
                stage('Run test-abs-local AS V8') {
                    when {
                        expression { return params.run_test_abs_local_v8 }
                    }
                    steps {
                        build job: "test-abs-local", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-local/${automation_branch}", parameters: absBranch + installationSource, propagate: true
                    }
                }
                stage('Run test-abs-negative-local') {
                    when {
                        expression { return params.run_test_abs_negative_local }
                    }
                    steps {
                        build job: "test-abs-negative-local", wait: false, propagate: true
                        sleep 60
                        build job: "test-abs-negative-local/${automation_branch}", parameters: absBranch + installationSource, propagate: true
                    }
                }
                stage('Run test-abs-sequential-local') {
                    when {
                        expression { return params.run_test_abs_sequential_local }
                    }
                    steps {
                        build job: "test-abs-sequential-local", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-sequential-local/${automation_branch}", parameters: absBranch + installationSource, propagate: true
                    }
                }
                stage('Run test-abs-sequential-local-2') {
                    when {
                        expression { return params.run_test_abs_sequential_local_2 }
                    }
                    steps {
                        build job: "test-abs-sequential-local-2", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-sequential-local-2/${automation_branch}", parameters: absBranch + installationSource, propagate: true
                    }
                }
                stage('Run test-abs-configurations-local') {
                    when {
                        expression { return params.run_test_abs_configuraions_local }
                    }
                    steps {
                        build job: "test-abs-configurations-local", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-configurations-local/${automation_branch}", parameters: absBranch + installationSource, propagate: true
                    }
                }
                stage('Run test-abs-service-local') {
                    when {
                        expression { return params.run_test_abs_service_local }
                    }
                    steps {
                        build job: "test-abs-service-local", wait: false, propagate: true
                        sleep 60
                        build job: "test-abs-service-local/${automation_branch}", parameters: absBranch + installationSource, propagate: true
                    }
                }
                stage('Run test-abs-local AS V6') {
                    when {
                        expression { return params.run_test_abs_local_v6 }
                    }
                    steps {
                        build job: "test-abs-local", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-local/${automation_branch}", parameters: absBranch + aersopikeClusterV6 + installationSource, propagate: true
                    }
                }
                stage('Run test-abs-c-to-go-local') {
                    when {
                        expression { return params.run_test_abs_c_to_go_local }
                    }
                    steps {
                        build job: "test-abs-c-to-go-local", wait: false, propagate: true
                        sleep 60
                        build job: "test-abs-c-to-go-local/${automation_branch}", parameters: absBranch + installationSource, propagate: true
                    }
                }
                stage('Run Sequential GCP Tests') {
                    when {
                        expression { return params.run_test_abs_sequential_local_gcp }
                    }
                    steps {
                        build job: "test-abs-sequential-local", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-sequential-local/${automation_branch}", parameters: absBranch + installationSource + gcp, propagate: true

                        build job: "test-abs-sequential-local-2", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-sequential-local-2/${automation_branch}", parameters: absBranch + installationSource + gcp, propagate: true
                    }
                }
                stage('Run Sequential Azure Tests') {
                    when {
                        expression { return params.run_test_abs_sequential_local_azure }
                    }
                    steps {
                        build job: "test-abs-sequential-local", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-sequential-local/${automation_branch}", parameters: absBranch + installationSource + azure, propagate: true

                        build job: "test-abs-sequential-local-2", wait: false, propagate: true
                        sleep 20
                        build job: "test-abs-sequential-local-2/${automation_branch}", parameters: absBranch + installationSource + azure, propagate: true
                    }
                }
            }
        }
    }
}