def absScriptPath = "/devops/run_tests/abs/AbsScript.groovy"
def absScript

pipeline{

    agent {
        label "${params.jenkins_slave}"
    }
    parameters{
        booleanParam(name: 'reinstall_abs', defaultValue: true)
        string(name: 'abs_branch', defaultValue: 'v3', description: 'The ABS branch you want to install from')
        choice(name: 'jvm_suspend', description: 'JVM Suspend For Remote Debug', choices: ['n', 'y'])
        choice(name: 'parallel_classes', description: 'How many test classes to run in parallel', choices: ['30', '1', '2', '3'])
        choice(name: 'asdb_version', description: 'Set the version of the Aerospike images', choices: ['7.2.0.3', '7.1.0.9', '7.0.0.18', '6.4.0.26', '6.3.0.31'])
        booleanParam(name: 'pull_from_jfrog', defaultValue: false)
        string(name: 'abs_version', defaultValue: 'tests', description: 'Replace the tag of the Jfrog-ABS images')
        choice(name: 'abs_jfrog_stage', description: 'Choose the JFrog stage to pull from', choices: ['dev', 'stage', 'prod'])
        choice(name: 'jenkins_slave', description: 'The slave that the job will run on', choices: ['AllSlaves', 'Slave1', 'Slave2', 'Slave3'])
        choice(name: 'config_restore_parallel', description: 'Which parallelism value to use for restore', choices: ['8', '1'])
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '30'))
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }

    stages {
        stage('Uninstall ABS') {
            when {
                expression { return params.reinstall_abs }
            }
            steps {
                script {
                    absScript = load pwd() + absScriptPath
                    absScript.uninstall()
                }
            }
        }
        stage('Install ABS') {
            when {
                expression { return params.reinstall_abs }
            }
            steps {
                script {
                    absScript.install()
                    sleep 10 // sleep 10 seconds till the backup-service will be fully ready
                }
            }
        }

        stage('Run Backup tests') {
            steps {
                script{
                    absScript = load pwd() + absScriptPath
                    absScript.runMvnIntegrationTest("ABS-E2E")
                }
            }
        }
    }
}
