def adrScriptPath = "/devops/run_tests/adr/AdrScript.groovy"
def adrScript

pipeline {
    agent {
        label "${params.jenkins_slave}"
    }
    parameters {
        booleanParam(name: 'install_environment', defaultValue: false)
        booleanParam(name: 'run_tests', defaultValue: false)
        booleanParam(name: 'uninstall_environment', defaultValue: false)
        booleanParam(name: 'dynamic_xdr_mode', defaultValue: false)
        string(name: 'enterprise_backup_branch', defaultValue: 'main', description: 'The enterprise-backup branch you want the installation to run from')
        choice(name: 'jfrog_repository_stage', description: 'Set the repository stage you want to pull from', choices: ['dev', 'stage', 'prod'])
        booleanParam(name: 'recreate_adr_entities', defaultValue: false)
        choice(name: 'test_duration', description: 'Short for a 15 minutes test and long for a 25 hours test', choices: ['short', 'long'])
        choice(name: 'on_going_initial_throughput', description: 'Sets the initial on going throughput of the tests. It will be doubled at the middle of the test', choices: ['50', '20', '100', '500', '1000', '2000', '3000'])
        choice(name: 'data_spikes_duration', description: 'How long the asbench will run in data spikes', choices: ['10', '5', '20', '30', '60', '80', '100', '120'])
        string(name: 'adr_version', defaultValue: 'latest', description: 'Replace the tag of the JFrog-ADR images')
        choice(name: 'number_of_nodes', description: 'How many test classes to run in parallel', choices: ['3', '4', '5'])
        choice(name: 'jvm_suspend', description: 'JVM Suspend For Remote Debug', choices: ['n', 'y'])
        choice(name: 'parallel_classes', description: 'How many test classes to run in parallel', choices: ['30'])
        choice(name: 'jenkins_slave', description: 'The slave that the job will run on', choices: ['testAWS1', 'testAWS2', 'testAWS3'])
        choice(name: 'aws_env_workspace', description: 'The AWS environment workspace the tests should run on', choices: ['test', 'david'])
    }
    options {
        timeout(time: 60, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '30'))
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }

    stages {
        stage('Install AWS Environment') {
            when {
                expression { return params.install_environment }
            }
            steps {
                script {
                    adrScript = load pwd() + adrScriptPath
                    def numberOfNodes = params.number_of_nodes
                    adrScript.installAws(numberOfNodes)
                }
            }
        }

        stage('Run Long Duration tests') {
            when {
                expression { return params.run_tests }
            }
            steps {
                script {
                    adrScript = load pwd() + adrScriptPath

                    dir("/opt/automation/awsInstall") {
                        sh 'rm -rf enterprise-backup || true'
                        sh "git clone https://$GITHUB_TOKEN@github.com/citrusleaf/enterprise-backup.git"
                    }
                    dir("/opt/automation/awsInstall/enterprise-backup") {
                        sh 'git checkout ${enterprise_backup_branch}'
                    }
                    dir("/opt/automation/awsInstall/enterprise-backup/scripts") {
                        sh "./init-env.sh ${aws_env_workspace}"
                    }
                    dir("./devops/install/backup") {
                        if (env.dynamic_xdr_mode.toString() == 'true')
                            sh 'echo  "\nSTATIC_CONFIGURATION=false" >> .env'
                    }

                    def backupInstanceIds = adrScript.getTerraformOutput("adr-backup-cluster-instance-ids").join(',')
                    sh "echo backupInstanceIds: ${backupInstanceIds}"
                    def sourceInstanceIds = adrScript.getTerraformOutput("adr-source-cluster-instance-ids").join(',')
                    sh "echo sourceInstanceIds: ${sourceInstanceIds}"
                    def restBackendUrl = adrScript.getTerraformOutput("adr-eks-ingress-controller-hostname")
                    restBackendUrl = restBackendUrl.join(", ").replaceAll("\\[|\\]", "")  // Remove square brackets
                    sh "echo restBackendUrl: ${restBackendUrl}"

                    dir("./backup-tests") {
                        sh ". /etc/environment; mvn integration-test -Dgroups=ADR-LONG-TIME-TEST -Drp.launch=${JOB_NAME} -Dqa_environment=AWS -Daws_env_workspace=${aws_env_workspace} \
                     -Djunit.jupiter.execution.parallel.config.fixed.parallelism=${parallel_classes} -Dtest_duration=${test_duration} \
                     -DbackupInstanceIds=${backupInstanceIds} -DsourceInstanceIds=${sourceInstanceIds} -DrestBackendUrl=${restBackendUrl} \
                     -Don_going_initial_throughput=${on_going_initial_throughput} -Ddata_spikes_duration=${data_spikes_duration} \
                     -Drecreate_adr_entities=${recreate_adr_entities} \
                     -Drp.description=\"Running on AWS ADR-Version=${adr_version} dynamic_xdr_mode=${dynamic_xdr_mode} \
                      on_going_initial_throughput=${on_going_initial_throughput} data_spikes_duration=${data_spikes_duration} aws_env_workspace=${aws_env_workspace}\" \
                     -Dmaven.failsafe.debug=\"-agentlib:jdwp=transport=dt_socket,server=y,suspend=${jvm_suspend},address=*:1045\""
                    }
                }
            }
        }

        stage('Uninstall AWS Environment') {
            when {
                expression { return params.uninstall_environment }
            }
            steps {
                script {
                    adrScript = load pwd() + adrScriptPath
                    adrScript.uninstallAws()
                }
            }
        }
    }
}
