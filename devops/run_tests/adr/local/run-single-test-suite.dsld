def adrScriptPath = "/devops/run_tests/adr/AdrScript.groovy"
def adrScript

pipeline{

    agent {
        label "AllSlaves"
    }
    parameters{
        string(name: 'CLASS_QUALIFIED_NAME', defaultValue: 'api.backup.end2end.RetrieveTest', description: 'Qualified name of the test class you want to run')
        string(name: 'TEST_NAME', defaultValue: 'retrieveLatest', description: 'Optional: The test you want to run')
        booleanParam(name: 'reinstall_adr', defaultValue: true)
        choice(name: 'asdb_version', description: 'Set the version of the Aerospike images', choices: ['5.7.0.31', 'latest', '6.1.0.19', '6.4.0.1'])
        choice(name: 'aerospike_backup_image_version', description: 'Set the version of the Aerospike images', choices: ['6.4.0.1', '6.1.0.19', 'latest'])
        choice(name: 'jvm_suspend', description: 'JVM Suspend For Remote Debug', choices: ['n', 'y'])
        string(name: 'adr_image_version', defaultValue: 'latest', description: 'Replace the tag of the Jfrog-ADR images')
        choice(name: 'qa_environment', description: 'JVM Suspend For Remote Debug', choices: ['LOCAL', 'AWS'])
        choice(name: 'parallel_classes', description: 'How many test classes to run in parallel', choices: ['1'])
        booleanParam(name: 'tls_enabled', defaultValue: false)
        booleanParam(name: 'install_from_enterprise_backup_project', defaultValue: true, description: 'Images will be created from the entersprise-backup project')
        booleanParam(name: 'delete_enterprise_backup_images', defaultValue: false, description: 'if install_from_enterprise_backup_project=true it will delete the old images')
        string(name: 'enterprise_backup_branch', defaultValue: 'main', description: 'The enterprise-backup branch you want to install from. Will be used only when install_from_enterprise_backup_project=true')
    }
    options {
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10', daysToKeepStr: '30'))
    }

    environment {
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
    }

    stages {
        stage('Uninstall ADR') {
            when {
                expression { return params.reinstall_adr }
            }
            steps {
                script {
                    adrScript = load pwd() + adrScriptPath
                    adrScript.uninstall()
                }
            }
        }
        stage('Install ADR') {
            when {
                expression { return params.reinstall_adr }
            }
            steps {
                script {
                    adrScript.install()
                }
            }
        }

        stage('Run Tests') {
            steps {
                script{
                    adrScript = load pwd() + adrScriptPath
                    adrScript.runSingleTestSuite()
                }
            }
        }
    }
}
